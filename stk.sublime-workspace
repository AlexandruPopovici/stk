{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"getDiamon",
				"getDiamondCount"
			],
			[
				"di",
				"diamondAmount"
			],
			[
				"depth",
				"depthTexture\t(?)"
			],
			[
				"normaliz",
				"normalize3"
			],
			[
				"surface",
				"surfaceHeight\t(?)"
			],
			[
				"diff",
				"diffEnumerables"
			],
			[
				"ge",
				"geometryDescriptors\t(?)"
			],
			[
				"canRender",
				"canRenderToScreen"
			],
			[
				"free",
				"freeFormPivot\t(?)"
			],
			[
				"mm_to",
				"mm_to_pixels_x\t(num)"
			],
			[
				"selected",
				"selectedTexture"
			],
			[
				"diamondsNee",
				"diamondsNeedRebatch"
			],
			[
				"diamondsN",
				"diamondsNeedRebatch"
			],
			[
				"diamonds",
				"diamondsNeedRebatch"
			],
			[
				"session",
				"sessionId"
			],
			[
				"thet",
				"theta_v\t(num)"
			],
			[
				"triang",
				"triangleCount\t(num)"
			],
			[
				"NaturePa",
				"NaturePatternFeature"
			],
			[
				"patter",
				"patternType"
			],
			[
				"pat",
				"patternType"
			],
			[
				"needs",
				"needsRecolor\t(?)"
			],
			[
				"pattern",
				"patternType"
			],
			[
				"Pattern",
				"PatternFeature"
			],
			[
				"pixes",
				"pixels_to_mm"
			],
			[
				"circum",
				"circumcircleB\t{}"
			],
			[
				"prevPo",
				"prevPointY\t(?)"
			],
			[
				"poly",
				"polyPoints\t[]"
			],
			[
				"trans",
				"transform"
			],
			[
				"Vec",
				"Vector3"
			],
			[
				"clock",
				"clockwiseMatrix"
			],
			[
				"bottom",
				"bottomY\t(num)"
			],
			[
				"natura",
				"naturalHeight"
			],
			[
				"natural",
				"naturalWidth"
			],
			[
				"client",
				"clientHeight"
			],
			[
				"mouse",
				"mouseMove"
			],
			[
				"minimal",
				"minimalScreenSpaceBoundingVertices"
			],
			[
				"MODE",
				"MODE_REGULAR\t(str)"
			],
			[
				"selec",
				"selectedOption\t(?)"
			],
			[
				"metric",
				"metricRange\t(?)"
			],
			[
				"GetCOm",
				"GetComponent"
			],
			[
				"WaitFor",
				"WaitForEndOfFrame"
			],
			[
				"fresnel",
				"fresnelTerm"
			],
			[
				"glow",
				"glowcomposer\t(?)"
			],
			[
				"rende",
				"render"
			],
			[
				"hasOw",
				"hasOwnProperty"
			],
			[
				"get",
				"getGlobalCollision()"
			],
			[
				"SafeA",
				"SAFE_APPLY\t(bool)"
			],
			[
				"has",
				"hasOwnProperty"
			],
			[
				"req",
				"requestedCirc"
			],
			[
				"height",
				"heightDelta\t(num)"
			],
			[
				"delta",
				"deltaDSize\t(num)"
			],
			[
				"nonLin",
				"nonLinearHeight\t(num)"
			],
			[
				"linear",
				"linearHeight\t(num)"
			],
			[
				"nonL",
				"nonLinearHeight\t(num)"
			],
			[
				"non",
				"nonLinearHeight\t(?)"
			],
			[
				"vA",
				"vAmount"
			],
			[
				"restric",
				"restrictedHeight\t(num)"
			],
			[
				"diamo",
				"diamondMargin"
			],
			[
				"constr",
				"constraints"
			],
			[
				"wave",
				"waveHeight"
			],
			[
				"property",
				"propertyName"
			],
			[
				"REND",
				"RENDERER_STATUS_READY"
			],
			[
				"RE",
				"RENDERER_STATUS_READY"
			],
			[
				"RENDERER",
				"RENDERER_STATUS_RUNNING"
			],
			[
				"Rende",
				"RENDERER_STATUS_RUNNING\t(str)"
			],
			[
				"Render",
				"RENDERER_STATUS_READY\t(str)"
			],
			[
				"Rne",
				"RENDERER_STATUS_READY\t(str)"
			],
			[
				"ring",
				"ringsContext"
			],
			[
				"_",
				"_uvScale"
			],
			[
				"diamond",
				"diamondAmount"
			],
			[
				"wi",
				"width"
			],
			[
				"heigh",
				"heightUnits"
			],
			[
				"point",
				"pointsToMetric"
			],
			[
				"heg",
				"heightUnits"
			],
			[
				"metrc",
				"metricSize"
			],
			[
				"ringI",
				"ringID"
			],
			[
				"_di",
				"_distance_a"
			],
			[
				"material",
				"materialExterior"
			],
			[
				"_light",
				"_lightmapOutsideY"
			],
			[
				"remove",
				"removeEventListener"
			],
			[
				"scale",
				"scaleAmount\t(num)"
			],
			[
				"anticl",
				"antiClockwiseTransform\t(?)"
			],
			[
				"clo",
				"clockwiseMatrix"
			],
			[
				"featu",
				"featureX"
			],
			[
				"this",
				"thisOption\t{}"
			],
			[
				"index",
				"indexOf"
			],
			[
				"interior",
				"interiorNormalmap"
			],
			[
				"inter",
				"interiorHeightmap\t(?)"
			],
			[
				"exter",
				"exteriorNormalmap\t(?)"
			],
			[
				"can",
				"canRender"
			],
			[
				"create",
				"createStitches"
			],
			[
				"ant",
				"antiClockwiseTransform\t(?)"
			],
			[
				"anti",
				"antiClockwiseTransform"
			],
			[
				"plane",
				"planeSurface"
			],
			[
				"target",
				"target_restore"
			],
			[
				"restore",
				"restoreHeight\t(num)"
			],
			[
				"background",
				"backgroundContainer"
			],
			[
				"screen",
				"screenshotTime\t(num)"
			],
			[
				"bottomM",
				"bottomMarker"
			],
			[
				"topMar",
				"topMarker\t(?)"
			],
			[
				"PROFIL",
				"PROFILE_C"
			],
			[
				"inner",
				"innerOcclusionThreshold"
			],
			[
				"PROFILE",
				"PROFILE_A"
			],
			[
				"ringIns",
				"ringInstances"
			],
			[
				"diamondS",
				"diamondSize"
			],
			[
				"DIAMOND",
				"DIAMOND_FILL_LOOSE"
			],
			[
				"diamon",
				"diamondAmount"
			],
			[
				"dSize",
				"dSize2\t(?)"
			],
			[
				"DIAMON",
				"DIAMOND_FILL_FILL\t(str)"
			],
			[
				"DIAMOND_FILL",
				"DIAMOND_FILL_LOOSE\t(str)"
			],
			[
				"Oblique",
				"ObliqueLineFeature"
			],
			[
				"upda",
				"updateMargins\t(bool)"
			],
			[
				"getMax",
				"getMaxVAlign"
			],
			[
				"FEA",
				"FeatureColor"
			],
			[
				"PRONGS_HEX",
				"PRONGS_HEX_BOTTOM\t(num)"
			],
			[
				"PRONGS_PARAMS_HE",
				"PRONGS_PARAMS_HEX_BOTTOM_TOP\t{}"
			],
			[
				"compute",
				"computeProngs\t(?)"
			],
			[
				"Diamond",
				"DiamondPatternFeature"
			],
			[
				"draw",
				"drawPolygonDiamonds"
			],
			[
				"grid",
				"gridDelta"
			],
			[
				"outer",
				"outerSegments"
			],
			[
				"surfa",
				"surfaceWidth\t(?)"
			],
			[
				"size",
				"sizeX"
			],
			[
				"diamona",
				"diamondAmount"
			],
			[
				"distance",
				"distanceTo"
			],
			[
				"instane",
				"instanceID\t(?)"
			],
			[
				"clockwis",
				"clockwiseMatrix"
			],
			[
				"right",
				"rightWidth\t(num)"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/home/busyalex/Insignety Designer/designer/index.html",
			"settings":
			{
				"buffer_size": 9718,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/busyalex/Insignety Designer/designer/src/modules/ring_design/ringdesign.controller.es6",
			"settings":
			{
				"buffer_size": 111225,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/busyalex/Insignety Designer/designer/src/webgl/Renderer.js",
			"settings":
			{
				"buffer_size": 40153,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/busyalex/Insignety Designer/designer/src/webgl/utils.js",
			"settings":
			{
				"buffer_size": 16853,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/busyalex/octane-scripting/src/Load.lua",
			"settings":
			{
				"buffer_size": 47500,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/home/busyalex/octane-scripting/src/configuration.json",
			"settings":
			{
				"buffer_size": 11249,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/busyalex/Insignety Designer/designer/src/webgl/RingController.js",
			"settings":
			{
				"buffer_size": 2429,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/busyalex/.bashrc",
			"settings":
			{
				"buffer_size": 3841,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/busyalex/Insignety cleanup/insignety/build.sbt",
			"settings":
			{
				"buffer_size": 22512,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/busyalex/Insignety Designer/designer/src/modules/app/insignety-conf.js",
			"settings":
			{
				"buffer_size": 924,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/busyalex/Insignety Designer/designer/src/webgl/lib/SimplifyModifier.js",
			"settings":
			{
				"buffer_size": 9789,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/busyalex/Insignety cleanup/insignety/project/plugins.sbt",
			"settings":
			{
				"buffer_size": 1755,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/busyalex/Insignety Designer/designer/src/webgl/RingBuilder.js",
			"settings":
			{
				"buffer_size": 25198,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/busyalex/Insignety Designer/designer/src/webgl/Repository.js",
			"settings":
			{
				"buffer_size": 9280,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/busyalex/Insignety Designer/designer/src/webgl/RawGeometry.js",
			"settings":
			{
				"buffer_size": 8976,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/busyalex/Insignety Designer/designer/src/webgl/RingInstance.js",
			"settings":
			{
				"buffer_size": 30008,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "RING.Materials = function () {\n};\n\nRING.Materials.prototype = {\n\n    constructor: RING.Materials,\n\n    getDefault: function (shell, finish) {\n               \n        var material;\n        switch (finish) {\n            case RING.FINISH_HIGHGLOSS:\n                material = new THREE.ShaderMaterial(\n                {\n                    vertexShader: vertexShaderFastRNM,\n                    fragmentShader: fragmentShaderFastRNM\n                });\n                material.uniforms.diffColor = { type: \"c\", value: new THREE.Color(0.23, 0.27, 0.29) };\n                material.uniforms.specColor = { type: \"c\", value: new THREE.Color(0.50, 0.54, 0.56) };\n                material.uniforms.reflColor = { type: \"c\", value: new THREE.Color(0.54, 0.58, 0.60) };\n                material.uniforms.engravingColor = { type: \"c\", value: new THREE.Color(0.70, 0.70, 0.70) };\n                material.uniforms.colorContributions = { type: \"v4\", value: new THREE.Vector4(1.0, 1.0, 1.0, 1.0) };\n                material.uniforms.lightmap = { type: \"t\", value: repository.textures.lightmap };\n                material.uniforms.irradiance = { type: \"t\", value: repository.cubemaps.irradiance };\n                material.uniforms.reflTexture = { type: \"t\", value: repository.textures.white_room };\n                material.uniforms.uvOffset = {type: \"v2\", value: new THREE.Vector2(-0.396913330646822,0)};\n                material.uniforms.lightModulation = {type: \"v3\", value: new THREE.Vector3(1, 1, 0)};\n                material.uniforms.alphaMap = {type: \"t\", value: repository.textures.alphaMap};\n                break;\n\n            case RING.FINISH_SATIN_MATTE:\n                material = new THREE.ShaderMaterial(\n                {\n                    vertexShader: vertexShaderFastRNMAnisotropic,\n                    fragmentShader: fragmentShaderFastRNMAnisotropic\n                });\n                material.uniforms.diffColor = { type: \"c\", value: new THREE.Color(0.23, 0.27, 0.29) };\n                material.uniforms.specColor = { type: \"c\", value: new THREE.Color(0.50, 0.54, 0.56) };\n                material.uniforms.reflColor = { type: \"c\", value: new THREE.Color(0.54, 0.58, 0.60) };\n                material.uniforms.engravingColor = { type: \"c\", value: new THREE.Color(0.70, 0.70, 0.70) };\n                material.uniforms.colorContributions = { type: \"v4\", value: new THREE.Vector4(1.0, 0.75, 1.0, 1.0) };\n                material.uniforms.lightmap = { type: \"t\", value: repository.textures.lightmap };\n                material.uniforms.irradiance = { type: \"t\", value: repository.cubemaps.irradiance };\n                material.uniforms.reflTexture = { type: \"t\", value: repository.textures.white_room_blurred };\n                material.uniforms.anisoDirection = { type: \"t\", value: repository.textures.anisoDirection_satin };\n                material.uniforms.uvOffset = {type: \"v2\", value: new THREE.Vector2(-0.396913330646822,0)};\n                material.uniforms.uvScale = { type: \"v2\", value: new THREE.Vector2(2.0, 1.0) };\n                material.uniforms.forceLod = { type: \"f\", value: 1. };\n                material.uniforms.lightModulation = {type: \"v3\", value: new THREE.Vector3(1, 1, 0)};\n                break;\n\n            case RING.FINISH_ICE_MATTE:\n                material = new THREE.ShaderMaterial(\n                {\n                    vertexShader: vertexShaderFastRNMAnisotropic,\n                    fragmentShader: fragmentShaderFastRNMAnisotropic\n                });\n                material.uniforms.diffColor = { type: \"c\", value: new THREE.Color(0.23, 0.27, 0.29) };\n                material.uniforms.specColor = { type: \"c\", value: new THREE.Color(0.50, 0.54, 0.56) };\n                material.uniforms.reflColor = { type: \"c\", value: new THREE.Color(0.54, 0.58, 0.60) };\n                material.uniforms.engravingColor = { type: \"c\", value: new THREE.Color(0.70, 0.70, 0.70) };\n                material.uniforms.colorContributions = { type: \"v4\", value: new THREE.Vector4(1.0, 0.75, 1.0, 1.0) };\n                material.uniforms.lightmap = { type: \"t\", value: repository.textures.lightmap };\n                material.uniforms.irradiance = { type: \"t\", value: repository.cubemaps.irradiance };\n                material.uniforms.reflTexture = { type: \"t\", value: repository.textures.white_room_blurred };\n                material.uniforms.anisoDirection = { type: \"t\", value: repository.textures.anisoDirection_ice };\n                material.uniforms.uvOffset = {type: \"v2\", value: new THREE.Vector2(-0.396913330646822,0)};\n                material.uniforms.uvScale = { type: \"v2\", value: new THREE.Vector2(8.0, 1.0) };\n                material.uniforms.forceLod = { type: \"f\", value: 0 };\n                material.uniforms.lightModulation = {type: \"v3\", value: new THREE.Vector3(1, 1, 0)};\n                break;\n        }\n        material.lights = false;\n        material.extensions.derivatives = true;\n        return material;\n    },\n\n    getDefaultDiamondPass1: function () {\n        var materialDiamondPass1 = new THREE.ShaderMaterial(\n\t\t{\n\t\t    vertexShader: vertexShaderDiamondBack,\n\t\t    fragmentShader: fragmentShaderDiamondBack\n\t\t});\n        materialDiamondPass1.uniforms.refrCube = { type: \"t\", value: repository.cubemaps.refractionMap };\n        materialDiamondPass1.uniforms.inverseWorldMatrix = { type: \"m4\", value: new THREE.Matrix4().identity() };\n        materialDiamondPass1.uniforms.pivotRotationMatrix = { type: \"m4\", value: new THREE.Matrix4().identity() };\n        materialDiamondPass1.uniforms.normals = { type: \"t\", value: repository.textures.randomNormals };\n        materialDiamondPass1.uniforms.refr = { type: \"t\", value: repository.textures.randomRefractions };\n        materialDiamondPass1.side = THREE.BackSide;\n        // materialDiamondPass1.transparent = true;\n        // materialDiamondPass1.blending = THREE[ \"CustomBlending\" ];\n        // materialDiamondPass1.blendSrc = THREE[ \"SrcAlphaFactor\" ];\n        // materialDiamondPass1.blendDst = THREE[ \"OneMinusDstAlphaFactor\" ];\n        // materialDiamondPass1.blendEquation = THREE.AddEquation;\n        return materialDiamondPass1;\n    },\n\n    getDefaultDiamondPass2: function () {\n        var materialDiamondPass2 = new THREE.ShaderMaterial(\n\t\t{\n\t\t    vertexShader: vertexShaderDiamondFront,\n\t\t    fragmentShader: fragmentShaderDiamondFront\n\t\t});\n        materialDiamondPass2.uniforms.refrCube = { type: \"t\", value: repository.cubemaps.refractionMap };\n        materialDiamondPass2.uniforms.inverseWorldMatrix = { type: \"m4\", value: new THREE.Matrix4().identity() };\n        materialDiamondPass2.uniforms.pivotRotationMatrix = { type: \"m4\", value: new THREE.Matrix4().identity() };\n        materialDiamondPass2.uniforms.normals = { type: \"t\", value: repository.textures.randomNormals };\n        materialDiamondPass2.uniforms.irradianceCube = { type: \"t\", value: repository.cubemaps.irradiance };\n        materialDiamondPass2.uniforms.reflCube = { type: \"t\", value: repository.cubemaps.reflectionMap };\n        materialDiamondPass2.uniforms.spectralCube = { type: \"t\", value: repository.cubemaps.rainbowCubemap };\n        materialDiamondPass2.uniforms.colour = { type: \"c\", value: new THREE.Color() };\n        materialDiamondPass2.side = THREE.FrontSide;\n        materialDiamondPass2.transparent = true;\n        materialDiamondPass2.opacity = 0.9;\n        materialDiamondPass2.blending = THREE.AdditiveBlending;\n        return materialDiamondPass2;\n    },\n\n    getDefaultSide: function () {\n        var materialSides = new THREE.ShaderMaterial(\n\t    {\n\t        vertexShader: vertexShaderRNMSide,\n\t        fragmentShader: fragmentShaderRNMSide\n\t    });\n        materialSides.uniforms.diffColor = { type: \"c\", value: new THREE.Color(0.23, 0.27, 0.29) };\n        materialSides.uniforms.specColor = { type: \"c\", value: new THREE.Color(0.50, 0.54, 0.56) };\n        materialSides.uniforms.reflColor = { type: \"c\", value: new THREE.Color(0.54, 0.58, 0.60) };\n        materialSides.uniforms.irradiance = { type: \"t\", value: repository.cubemaps.irradiance };\n        materialSides.uniforms.reflTexture = { type: \"t\", value: repository.textures.white_room };\n        materialSides.uniforms.fakeOcclusion = { type: \"f\", value: 1. };\n        materialSides.lights = false;\n        materialSides.extensions.derivatives = true;\n        return materialSides;\n    },\n\n    getDefaultProngCap: function(finish) {\n        var materialProngCap;\n        switch (finish) {\n            case RING.FINISH_HIGHGLOSS:\n                materialProngCap = new THREE.ShaderMaterial(\n                {\n                    vertexShader: vertexShaderRNMProngCap,\n                    fragmentShader: fragmentShaderRNMProngCap\n                });\n                materialProngCap.uniforms.diffColor = { type: \"c\", value: new THREE.Color(0.23, 0.27, 0.29) };\n                materialProngCap.uniforms.specColor = { type: \"c\", value: new THREE.Color(0.50, 0.54, 0.56) };\n                materialProngCap.uniforms.reflColor = { type: \"c\", value: new THREE.Color(0.54, 0.58, 0.60) };\n                materialProngCap.uniforms.colorContributions = { type: \"v4\", value: new THREE.Vector4(1.0, 1.0, 1.0, 1.0) };\n                materialProngCap.uniforms.lightmapX = { type: \"t\", value: repository.textures.lightmapX };\n                materialProngCap.uniforms.lightmapY = { type: \"t\", value: repository.textures.lightmapY };\n                materialProngCap.uniforms.lightmapZ = { type: \"t\", value: repository.textures.lightmapZ };\n                //materialProngCap.uniforms.envMap = { type: \"t\", value: repository.cubemaps.enviromentMap };\n                materialProngCap.uniforms.irradiance = { type: \"t\", value: repository.cubemaps.irradiance };\n                materialProngCap.uniforms.reflTexture = { type: \"t\", value: repository.textures.white_room };\n                materialProngCap.lights = false;\n                materialProngCap.extensions.derivatives = false;\n                break;\n\n            case RING.FINISH_SATIN_MATTE:\n                materialProngCap = new THREE.ShaderMaterial(\n                {\n                    vertexShader: vertexShaderRNMAnisotropicProngCap,\n                    fragmentShader: fragmentShaderRNMAnisotropicProngCap\n                });\n                materialProngCap.uniforms.diffColor = { type: \"c\", value: new THREE.Color(0.23, 0.27, 0.29) };\n                materialProngCap.uniforms.specColor = { type: \"c\", value: new THREE.Color(0.50, 0.54, 0.56) };\n                materialProngCap.uniforms.reflColor = { type: \"c\", value: new THREE.Color(0.54, 0.58, 0.60) };\n                materialProngCap.uniforms.colorContributions = { type: \"v4\", value: new THREE.Vector4(1.0, 1.0, 1.0, 1.0) };\n                materialProngCap.uniforms.lightmapX = { type: \"t\", value: repository.textures.lightmapX };\n                materialProngCap.uniforms.lightmapY = { type: \"t\", value: repository.textures.lightmapY };\n                materialProngCap.uniforms.lightmapZ = { type: \"t\", value: repository.textures.lightmapZ };\n                //materialProngCap.uniforms.envMap = { type: \"t\", value: repository.cubemaps.enviromentMap };\n                materialProngCap.uniforms.irradiance = { type: \"t\", value: repository.cubemaps.irradiance };\n                materialProngCap.uniforms.reflTexture = { type: \"t\", value: repository.textures.white_room_blurred };\n                materialProngCap.uniforms.anisoDirection = { type: \"t\", value: repository.textures.anisoDirection_satin };\n                materialProngCap.lights = false;\n                materialProngCap.extensions.derivatives = true;\n                break;\n\n            case RING.FINISH_ICE_MATTE:\n                materialProngCap = new THREE.ShaderMaterial(\n                {\n                    vertexShader: vertexShaderRNMAnisotropicProngCap,\n                    fragmentShader: fragmentShaderRNMAnisotropicProngCap\n                });\n                materialProngCap.uniforms.diffColor = { type: \"c\", value: new THREE.Color(0.23, 0.27, 0.29) };\n                materialProngCap.uniforms.specColor = { type: \"c\", value: new THREE.Color(0.50, 0.54, 0.56) };\n                materialProngCap.uniforms.reflColor = { type: \"c\", value: new THREE.Color(0.54, 0.58, 0.60) };\n                materialProngCap.uniforms.colorContributions = { type: \"v4\", value: new THREE.Vector4(1.0, 1.0, 1.0, 1.0) };\n                materialProngCap.uniforms.lightmapX = { type: \"t\", value: repository.textures.lightmapX };\n                materialProngCap.uniforms.lightmapY = { type: \"t\", value: repository.textures.lightmapY };\n                materialProngCap.uniforms.lightmapZ = { type: \"t\", value: repository.textures.lightmapZ };\n                materialProngCap.uniforms.irradiance = { type: \"t\", value: repository.cubemaps.irradiance };\n                materialProngCap.uniforms.reflTexture = { type: \"t\", value: repository.textures.white_room_blurred };\n                materialProngCap.uniforms.anisoDirection = { type: \"t\", value: repository.textures.anisoDirection_ice };\n                materialProngCap.lights = false;\n                materialProngCap.extensions.derivatives = true;\n                break;\n        }\n        return materialProngCap;\n\n    },\n\n    getDefaultProngSide: function(){\n        var materialProngSide = new THREE.ShaderMaterial(\n        {\n            vertexShader: vertexShaderRNMProngSide,\n            fragmentShader: fragmentShaderRNMProngSide\n        });\n        materialProngSide.uniforms.engravingColor = { type: \"c\", value: new THREE.Color(0.70, 0.70, 0.70) };\n        materialProngSide.uniforms.lightmapX = { type: \"t\", value: repository.textures.lightmapX };\n        materialProngSide.uniforms.lightmapY = { type: \"t\", value: repository.textures.lightmapY };\n        materialProngSide.uniforms.lightmapZ = { type: \"t\", value: repository.textures.lightmapZ };\n        materialProngSide.uniforms.irradiance = { type: \"t\", value: repository.cubemaps.irradiance };\n        return materialProngSide;\n    },\n\n    getDefaultSegmentBack: function(){\n        var materialSegmentBack = new THREE.ShaderMaterial(\n        {\n            vertexShader: vertexShaderRNMSegmentBack,\n            fragmentShader: fragmentShaderRNMSegmentBack\n        });\n        materialSegmentBack.uniforms.engravingColor = { type: \"c\", value: new THREE.Color(0.70, 0.70, 0.70) };\n        materialSegmentBack.uniforms.lightmapX = { type: \"t\", value: repository.textures.lightmapX };\n        materialSegmentBack.uniforms.lightmapY = { type: \"t\", value: repository.textures.lightmapY };\n        materialSegmentBack.uniforms.lightmapZ = { type: \"t\", value: repository.textures.lightmapZ };\n        materialSegmentBack.uniforms.irradiance = { type: \"t\", value: repository.cubemaps.irradiance };\n        //materialSegmentBack.depthFunc = THREE.LessDepth;\n        return materialSegmentBack;\n    },\n    \n    getRingPlaneMaterial: function(innerRadius, outerRadius, border){\n        var materialRingPlane = new THREE.ShaderMaterial(\n        {\n            vertexShader: vertexShaderRingPlane,\n            fragmentShader: fragmentShaderRingPlane\n        });\n        materialRingPlane.uniforms.innerRadius = { type: \"f\", value: innerRadius };\n        materialRingPlane.uniforms.outerRadius = { type: \"f\", value: outerRadius };\n        materialRingPlane.uniforms.border = { type: \"f\", value: border };\n        materialRingPlane.uniforms.circle_color = { type: \"v4\", value: new THREE.Vector4(0.1, 0.1, 0.1, 1.) };\n        materialRingPlane.transparent = true;\n        materialRingPlane.depthWrite = false;\n        return materialRingPlane;//new THREE.MeshBasicMaterial({color:0xff0000, wireframe:true});\n    },\n\n    getComputeShaderMaterial: function () {\n        return new THREE.ShaderMaterial({\n            vertexShader: computeShaderVertex,\n            fragmentShader: computeShaderFragment\n        });\n    }\n}\n",
			"file": "/home/busyalex/Insignety Designer/designer/src/webgl/static/Materials.js",
			"file_size": 15880,
			"file_write_time": 131604992050977491,
			"settings":
			{
				"buffer_size": 15880,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "CanvasTexture = function (width, height) {\n\n\tthis.name = '';\n\tthis.type = 'CanvasTexture';\n\n\tthis.canvas = null;\n\tthis.context = null;\n\tthis.imageData = null;\n\tthis.texture = null;\n\tthis.width = width;\n\tthis.height = height;\n\tthis.create(width, height);\n};\n\nCanvasTexture.prototype = {\n\n\tconstructor: CanvasTexture,\n\n\tcreate: function(width, height){\n\t\tthis.canvas = document.createElement( 'canvas' );\n\t    this.canvas.width = width;\n\t    this.canvas.height = height;\n\t    this.context = this.canvas.getContext( '2d' );\n\t    this.texture = new THREE.Texture(this.canvas);\n\t    this.texture.anisotropy = 16;\n\t},\n\n\tupdate: function(image){\n\t\tif(image != null){\n\t\t\tthis.context.clearRect(0, 0, this.width, this.height);\n\t\t\tthis.context.drawImage(image,0,0);\n\t\t}\n\t\tthis.imageData = this.context.getImageData(0, 0, this.width, this.height);\n\t\tthis.texture.needsUpdate = true;\n\t},\n\n\tputImageData: function(imageData){\n\t\tthis.context.putImageData(imageData, 0, 0, 0, 0, this.canvas.width, this.canvas.height);\n\t\tthis.texture.needsUpdate = true;\n\t},\n\n\tfill: function(color, alpha){\n\t\tthis.context.save();\n\t\tthis.context.globalAlpha = alpha;\n\t\tthis.context.globalCompositeOperation = \"source-in\";\n\t\tthis.context.fillStyle = color;\n\t\tthis.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\t\tthis.context.restore();\n\t},\n\n\tclear: function(){\n\t\tthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\t},\n\n\tresize: function(width, height){\n\t\tthis.canvas.width = width;\n\t\tthis.canvas.height = height;\n\t},\n\n\ttoBase64: function(){\n\t\treturn this.canvas.toDataURL().split(',')[1];\n\t},\n\n\trelease: function(){\n\t\tthis.canvas = null;\n\t\tthis.context = null;\n\t\tthis.texture.dispose();\n\t\tthis.texture = null;\n\t\tdelete this.context;\n\t\tdelete this.canvas;\n\t\tdelete this.texture;\n\t},\n\n\tcrop: function(polygons){\n\t\tif(polygons.length == 0)\n\t\t\treturn;\n\t\t// console.warn('Before -> ', this.canvas.toDataURL());\n\t\tthis.context.save();\n\t\tthis.context.fillStyle = '#ffffff';\n\t\tthis.context.globalAlpha = 0;\n\t\tthis.context.globalCompositeOperation = \"source-in\";\n\t\tfor(var p = 0; p < polygons.length; p++){\n\t\t\tvar polygon = polygons[p];\n\t\t\tvar context = polygons[p].context;\n\t\t\tvar mm_to_pixels = new THREE.Vector2();\n\t\t\tmm_to_pixels.x = this.canvas.width / context.circumference;\n\t\t\tmm_to_pixels.y = this.canvas.height / context.width;\n\t\t\tvar path = new Path2D();\n\t\t\tpath.moveTo(polygon.points[0]*mm_to_pixels.x, polygon.points[1]*mm_to_pixels.y);\n\t\t\tfor(var i = 2 ; i < polygon.points.length - 1; i+=2){\n\t\t\t\tpath.lineTo(polygon.points[i]*mm_to_pixels.x,polygon.points[i+1]*mm_to_pixels.y);\n\t\t\t}\n\t\t\tpath.lineTo(polygon.points[0]*mm_to_pixels.x, polygon.points[1]*mm_to_pixels.y);\n\n\t\t\t//Science BITCH!\n\t\t\tthis.context.save();\n\t\t\tthis.context.clip(path);\n\t\t\tthis.context.fill(path);\n\t\t\tthis.context.restore();\n\t\t\tthis.context.translate(-this.canvas.width * Math.sign(polygon.minX), 0);\n\t\t\tthis.context.save();\n\t\t\tthis.context.clip(path);\n\t\t\tthis.context.fill(path);\n\t\t\tthis.context.restore();\n\t\t\tthis.context.setTransform(1, 0, 0, 1, 0, 0);\n\t\t}\n\t\tthis.context.restore();\n\t\t// console.warn('After -> ', this.canvas.toDataURL());\n\t\tthis.update();\n\t},\n}",
			"file": "/home/busyalex/Insignety Designer/designer/src/webgl/util/CanvasTexture.js",
			"file_size": 3141,
			"file_write_time": 131604881918422625,
			"settings":
			{
				"buffer_size": 3141,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "RING.RingSurface = function () {\n\tthis.type = \"RingSurface\";\n\tthis.init();\n};\n\nRING.RingSurface.prototype = {\n\n    constructor: RING.RingSurface,\n\n    init: function(){\n    \tthis[RING.GeometryDescriptor.RING_SIDE_EXTERIOR] = {};\n\t\tthis[RING.GeometryDescriptor.RING_SIDE_INTERIOR] = {};\n\t\tthis[RING.GeometryDescriptor.RING_SIDE_NONE] = {};\n    },\n\n    update: function(meshType, ringSide, meshData){\n    \tif(!this[ringSide].hasOwnProperty(meshType))\n    \t\tthis[ringSide][meshType] = [];\n    \tif(Array.isArray(meshData))\n    \t\tthis[ringSide][meshType] = this[ringSide][meshType].concat(meshData);\n    \telse\n    \t\tthis[ringSide][meshType].push(meshData);\n    },\n\n    enumerate: function(ringSide){\n        for(var k in this[ringSide])\n            console.warn(k, this[ringSide][k]);\n    },\n\n\n}",
			"file": "/home/busyalex/Insignety Designer/designer/src/webgl/RingSurface.js",
			"file_size": 790,
			"file_write_time": 131605725854168928,
			"settings":
			{
				"buffer_size": 790,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "var repository = new Repository();\n\nsetInterval(function(){\n\tQUnit.test( \"RING DESCRIPTOR ENUMERABLE RESTORE\", function( assert ) {\n\t\tvar ring_original = randomRingEnumerable();\n\t\tvar descriptor = new RING.RingDescriptor();\n\t\tvar original = descriptor.fromEnumerable(ring_original);\n\t\tvar ring_restored = original.toEnumerable();\n\t\tassert.deepEqual( ring_restored, ring_original, \"RingDescriptor RESTORE ENUMERABLE success!\" );\n\t});\n\n\tQUnit.test( \"RING MODEL ENUMERABLE RESTORE\", function( assert ) {\n\t\tvar original = randomRingEnumerable();\n\t\tvar ringDescriptor = new RING.RingDescriptor();\n\t\tringDescriptor.fromEnumerable(original);\n\t\tvar ringModel = new RING.RingModel();\n\t\tringModel.fromDescriptor(ringDescriptor);\n\n\t\tvar restored = ringModel.toDescriptor().toEnumerable();\n\t\tassert.deepEqual( restored, original, \"RingModel RESTORE ENUMERABLE success!\" );\n\t});\n\n});",
			"file": "/home/busyalex/Insignety Designer/designer/src/test/ring-descriptor-tests.js",
			"file_size": 870,
			"file_write_time": 131604912458261201,
			"settings":
			{
				"buffer_size": 870,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "var BRIDGE = { version: '1'};\n\nvar SAFE_APPLY = true;\n\nvar repository = null;\nvar renderer = null;\nvar canvas2D = null;\nvar collisions = null;\n\nvar safeApplyList = [];\nvar nextFrameID;\nvar frameCount = 0;\n\nBRIDGE.create = function(){\n\n\tLogger.push('\\n--------> BRIDGE CREATE <--------\\n'+\n\t\t\t\t\t '### STATUS ###\\n'+\n\t\t\t\t\t 'REPOSITORY -> '+ repository + '\\n'+\n\t\t\t\t\t 'RENDERER -> '+ renderer + '\\n'+\n\t\t\t\t\t 'CANVAS -> ' + canvas2D);\n\n\tif(repository == null)\n\t\trepository = new Repository();\n\tif(renderer == null)\n\t\trenderer = new RING.Renderer();\n\tif(canvas2D == null)\n\t    canvas2D = new CANVAS.Surface2D();\n\tif (collisions == null)\n\t    collisions = new FENCE.Collisions();\n\n\trepository.setRequiredAssets_local_\n    (\n        [//Models\n         {type: Repository.INDEXED_MODEL, path: 'assets/obj/diamond_cut_t.obj', id: 'diamond'},\n         {type: Repository.INDEXED_MODEL, path: 'assets/obj/prong-cap.obj', id: 'prongCap'},\n         {type: Repository.INDEXED_MODEL, path: 'assets/obj/prong_side_5.obj', id: 'prongSide'},\n\n         // {type: Repository.INDEXED_MODEL, path: 'assets/obj/circ/C_largest.obj', id: 'largestC'},\n         // {type: Repository.INDEXED_MODEL, path: 'assets/obj/circ/C_smallest.obj', id: 'smallestC'},\n         // {type: Repository.INDEXED_MODEL, path: 'assets/obj/circ/B_largest.obj', id: 'largestB'},\n         // {type: Repository.INDEXED_MODEL, path: 'assets/obj/circ/B_smallest.obj', id: 'smallestB'},\n         // {type: Repository.INDEXED_MODEL, path: 'assets/obj/circ/A_largest.obj', id: 'largestA'},\n         // {type: Repository.INDEXED_MODEL, path: 'assets/obj/circ/A_smallest.obj', id: 'smallestA'},\n         // {type: Repository.INDEXED_MODEL, path: 'assets/obj/circ/inside_largest.obj', id: 'largestInside'},\n         // {type: Repository.INDEXED_MODEL, path: 'assets/obj/circ/inside_smallest.obj', id: 'smallestInside'},\n\n         // {type: Repository.INDEXED_MODEL, path: 'assets/obj/circ/A-side round-44-v4.obj', id: 'sideSmallestA'},\n         // {type: Repository.INDEXED_MODEL, path: 'assets/obj/circ/A-side round-75-v4.obj', id: 'sideLargestA'},\n         // {type: Repository.INDEXED_MODEL, path: 'assets/obj/circ/B-side round-44-v4.obj', id: 'sideSmallestB'},\n         // {type: Repository.INDEXED_MODEL, path: 'assets/obj/circ/B-side round-75-v4.obj', id: 'sideLargestB'},\n         // {type: Repository.INDEXED_MODEL, path: 'assets/obj/circ/C-side round-44-v4.obj', id: 'sideSmallestC'},\n         // {type: Repository.INDEXED_MODEL, path: 'assets/obj/circ/C-side round-75-v4.obj', id: 'sideLargestC'},\n\n\n         {type: Repository.TEXTURE_AND_DATA, path: 'assets/textures/blank_heightmap.png', id: 'blankHeightmap'},\n         {type: Repository.TEXTURE, path: 'assets/textures/blank_normalmap.png', id: 'blankNormalmap' },\n\n\n         {type: Repository.TEXTURE, path: 'assets/textures/red_bw.png', id: 'lightmapX' },\n         {type: Repository.TEXTURE, path: 'assets/textures/green_bw.png', id: 'lightmapY' },\n         {type: Repository.TEXTURE, path: 'assets/textures/blue_bw.png', id: 'lightmapZ' },\n         {type: Repository.TEXTURE, path: 'assets/textures/color_rgb.png', id: 'lightmap' },\n         { type: Repository.TEXTURE, path: 'assets/textures/diamond_random_normals.png', id: 'randomNormals' },\n         { type: Repository.TEXTURE, path: 'assets/textures/refr.jpg', id: 'randomRefractions' },\n\n         { type: Repository.TEXTURE, path: 'assets/textures/studio-final-4.jpg', id: 'white_room' },\n         { type: Repository.TEXTURE, path: 'assets/textures/insignety_reflection_map.jpg', id: 'white_room_blurred' },\n\n\n         { type: Repository.TEXTURE, path: 'assets/textures/aniso_direction_seamlessX.png', id: 'anisoDirection_satin' },\n         { type: Repository.TEXTURE, path: 'assets/textures/satin matte finish_3x3Sobel_small.jpg', id: 'anisoDirection_satin_small' },\n         { type: Repository.TEXTURE, path: 'assets/textures/insignety-ice-tile-512px_480_nm.jpg', id: 'anisoDirection_ice' },\n\n         // {type: RING.INDEXED_MODEL, path: 'assets/obj/Ring1/Finish-High-Gloss_t.obj', id: 'ring1_highGloss'},\n         // {type: RING.INDEXED_MODEL, path: 'assets/obj/Ring1/Finish-Multi_t.obj', id: 'ring1_multi'},\n         // {type: RING.INDEXED_MODEL, path: 'assets/obj/Ring1/Finish-Sand_t.obj', id: 'ring1_sand'},\n         // {type: RING.INDEXED_MODEL, path: 'assets/obj/Ring1/Gemstone_t.obj', id: 'ring1_gemstone'},\n\n         // {type: RING.INDEXED_MODEL, path: 'assets/obj/Ring2/Finish-High-Gloss_t.obj', id: 'ring2_highGloss'},\n         // {type: RING.INDEXED_MODEL, path: 'assets/obj/Ring2/Finish-Sand_t.obj', id: 'ring2_sand'},\n         // {type: RING.INDEXED_MODEL, path: 'assets/obj/Ring2/Gemstone1_t.obj', id: 'ring2_gemstone1'},\n         // {type: RING.INDEXED_MODEL, path: 'assets/obj/Ring2/Gemstone2_t.obj', id: 'ring2_gemstone2'},\n\n         { type: Repository.TEXTURE, path: 'assets/textures/Engraving_only.png', id: 'engraving_only' },\n\t\t { type: Repository.TEXTURE, path: 'assets/textures/Surface_only.png', id: 'surface_only' },\n\n         {\n         \ttype: Repository.CUBEMAP,\n          path:\n             [\n             'assets/textures/rainbow/' + '6.1' + '.png', 'assets/textures/rainbow/' + '5.1' + '.png',\n             'assets/textures/rainbow/' + '4.1' + '.png', 'assets/textures/rainbow/' + '2.1' + '.png',\n             'assets/textures/rainbow/' + '3.1' + '.png', 'assets/textures/rainbow/' + '1.1' + '.png'\n             ],\n          id: 'rainbowCubemap'\n         },\n         {\n             type: Repository.CUBEMAP,\n             path:\n                [\n                'assets/textures/irradiance/' + 'cross_PositiveX.png', 'assets/textures/irradiance/' + 'cross_NegativeX.png',\n                'assets/textures/irradiance/' + 'cross_NegativeY.png', 'assets/textures/irradiance/' + 'cross_PositiveY.png',\n                'assets/textures/irradiance/' + 'cross_PositiveZ.png', 'assets/textures/irradiance/' + 'cross_NegativeZ.png'\n                ],\n             id: 'irradiance'\n         },\n         {\n             type: Repository.CUBEMAP,\n             path:\n                [\n                'assets/textures/refraction/' + 'GemRefractions_PositiveX.png', 'assets/textures/refraction/' + 'GemRefractions_NegativeX.png',\n                'assets/textures/refraction/' + 'GemRefractions_NegativeY.png', 'assets/textures/refraction/' + 'GemRefractions_PositiveY.png',\n                'assets/textures/refraction/' + 'GemRefractions_PositiveZ.png', 'assets/textures/refraction/' + 'GemRefractions_NegativeZ.png'\n                ],\n             id: 'refractionMap'\n         },\n         {\n             type: Repository.CUBEMAP,\n             path:\n                [\n                'assets/textures/diamond_refl/' + 'diamond_refl_PositiveX.png', 'assets/textures/diamond_refl/' + 'diamond_refl_NegativeX.png',\n                'assets/textures/diamond_refl/' + 'diamond_refl_NegativeY.png', 'assets/textures/diamond_refl/' + 'diamond_refl_PositiveY.png',\n                'assets/textures/diamond_refl/' + 'diamond_refl_PositiveZ.png', 'assets/textures/diamond_refl/' + 'diamond_refl_NegativeZ.png'\n                ],\n             id: 'reflectionMap'\n         }\n        ]\n    );\n\tBRIDGE.update();\n};\n\nBRIDGE.halt = function(){\n\tcancelAnimationFrame(nextFrameID);\n\tsafeApplyList.length = 0;\n};\n\nBRIDGE.onWindowResize = function(){\n\tif(renderer != undefined){\n        var width = document.getElementById('rings').clientWidth;\n        var height = document.getElementById('rings').clientHeight;\n        renderer.resize(width, height);\n    }\n    if(canvas2D != undefined){\n        canvas2D.resize();\n    }\n};\n\nBRIDGE.attachRenderer = function(container){\n\tif(renderer == null){\n\t\tconsole.error('Renderer not intialized!');\n\t\treturn;\n\t}\n\tvar safeApply;\n\tif(RING.Renderer.Status.query(RING.RENDERER_STATUS_LOST)){\n\t\tsafeApply = new BRIDGE.SafeApply(\n\t\t\tfunction(){\n\t\t\t\treturn renderer && repository.isReady;\n\t\t\t}.bind(BRIDGE),\n\t\t\tfunction(){\n\t\t\t\trenderer.restore(container);\n\t\t\t}.bind(BRIDGE),\n\t\t\t'restore renderer'\n\t\t);\n\t}\n\telse{\n\t\tsafeApply = new BRIDGE.SafeApply(\n\t\t\tfunction(){\n\t\t\t\treturn renderer && repository.isReady;\n\t\t\t}.bind(BRIDGE),\n\t\t\tfunction(){\n\t\t\t\trenderer.createContext(container);\n\t\t\t\trenderer.init();\n\t\t\t}.bind(BRIDGE),\n\t\t\t'attach renderer'\n\t\t);\n\t}\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t}\n\telse{\n\t\tsafeApply.apply();\n\t}\n\n\n\twindow.addEventListener('resize', BRIDGE.onWindowResize, false);\n};\n\nBRIDGE.detachRenderer = function(){\n\trenderer.release();\n\twindow.removeEventListener('resize', BRIDGE.onWindowResize, false);\n};\n\nBRIDGE.resizeRenderer = function(width, height){\n\trenderer.resize(width, height);\n};\n\nBRIDGE.attachCanvas = function(svgContainer, viewportContainer){\n\tif(canvas2D == null){\n\t\tconsole.error('Canvas2D not intialized!');\n\t\treturn;\n\t}\n\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\treturn canvas2D && CANVAS.Surface2D.Metrics;\n\t\t}.bind(BRIDGE),\n\t\tfunction(){\n\t\t\tcanvas2D.init(svgContainer, viewportContainer);\n\t\t\tcanvas2D._test_globalDraw_all();\n\t\t}.bind(BRIDGE),\n\t\t'attach canvas '\n\t);\n\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t}\n\telse{\n\t\tsafeApply.apply();\n\t}\n};\n\nBRIDGE.detachCanvas = function(){\n\tcanvas2D.release();\n\tcollisions.release();\n};\n\nBRIDGE.getDrawableSurface = function(color, alpha){\n\treturn canvas2D.createDrawableSurface(color, alpha);\n};\n\nBRIDGE.setMetrics = function(shape){\n\tvar metrics = {};\n\tswitch(shape.profile){\n\t\tcase \"TYPEA\": metrics.profile = 0;break;\n\t\tcase \"TYPEB\": metrics.profile = 1;break;\n\t\tcase \"TYPEC\": metrics.profile = 2;break;\n\t\tdefault: metrics.profile = 0;break;\n\t}\n\tmetrics.width = shape.width;\n\tmetrics.circumference = shape.innerCircumference;\n\tcanvas2D.setMetrics(metrics);\n};\n\nBRIDGE.loadAssets = function(){\n\tif(!repository.isReady){\n\t\trepository.loadAll_local_();\n\t\tRING.Renderer.Status.set(RING.RENDERER_STATUS_LOADING_ASSETS);\n\t}\n};\n\nBRIDGE.wipe = function(){\n\trenderer.wipe();\n\tcollisions.release();\n\tif(RING.Renderer.Status.query(RING.RENDERER_STATUS_RUNNING))\n\t\tRING.Renderer.Status.set(RING.RENDERER_STATUS_READY);\n};\n\nBRIDGE.addRing = function(id, descriptor){\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\treturn RING.Renderer.Status.query(RING.RENDERER_STATUS_READY);\n\t\t}.bind(BRIDGE),\n\t\tfunction(){\n\t\t\tvar instance = renderer.createRingInstance(id, descriptor);\n\t\t\t//renderer.eval(id,model);\n\t\t}.bind(BRIDGE),\n\t\t'add ring ' + id\n\t);\n\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\n\tsafeApply.apply();\n};\n\nBRIDGE.duplicateRing = function(cloneID, originalID){\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\treturn RING.Renderer.Status.query(RING.RENDERER_STATUS_RUNNING) && renderer.hasRingInstance(originalID);\n\t\t}.bind(BRIDGE),\n\t\tfunction(){\n\t\t\tvar cloneInstance = renderer.ringInstances[cloneID];\n\t\t\tif(cloneInstance == undefined)\n\t\t\t\tcloneInstance = renderer.duplicateRingInstance(cloneID, originalID);\n\t\t\trenderer.eval(cloneID, renderer.ringInstances[originalID].getModel());\n\t\t}.bind(BRIDGE),\n\t\t'clone ring ' + originalID\n\t);\n\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\n\tsafeApply.apply();\n};\n\nBRIDGE.updateRing = function(id, model, callback){\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\treturn RING.Renderer.Status.query(RING.RENDERER_STATUS_READY) || RING.Renderer.Status.query(RING.RENDERER_STATUS_RUNNING);\n\t\t}.bind(BRIDGE),\n\t\tfunction(){\n\t\t\tvar didUpdate = renderer.eval(id,model);\n\t\t\tif(callback)\n\t\t\t\tcallback(didUpdate);\n\t\t}.bind(BRIDGE),\n\t\t'update Ring ' + id\n\t);\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\tsafeApply.apply();\n};\n\nBRIDGE.setActiveRing = function(id, shape, animate){\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\treturn RING.Renderer.Status.query(RING.RENDERER_STATUS_RUNNING) && renderer.hasRingInstance(id);\n\t\t}.bind(BRIDGE),\n\t\tfunction(){\n\t\t\tBRIDGE.setMetrics(shape);\n\t\t\trenderer.setInstance(id, animate);\n\t\t}.bind(BRIDGE),\n\t\t'set active ring ' + id\n\t);\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\tsafeApply.apply();\n};\n\nBRIDGE.enableRing = function(id, value){\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\treturn RING.Renderer.Status.canRender();//RING.Renderer.Status.query(RING.RENDERER_STATUS_RUNNING) && renderer.hasRingInstance(id);\n\t\t}.bind(BRIDGE),\n\t\tfunction(){\n\t\t\tif(renderer.hasRingInstance(id))\n\t\t\t\trenderer.ringInstances[id].enabled = value;\n\t\t}.bind(BRIDGE),\n\t\t'enable Ring ' + id + value\n\t);\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\tsafeApply.apply();\n};\n\nBRIDGE.setActiveSide = function(side, shape){\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\treturn canvas2D && canvas2D.canRender && RING.Renderer.Status.query(RING.RENDERER_STATUS_RUNNING) && renderer.hasRingInstance(null);\n\t\t}.bind(BRIDGE),\n\t\tfunction () {\n\t\t    BRIDGE.setMetrics(shape);\n\t\t\tcanvas2D.clear();\n\t\t\tcanvas2D.setSide(side);\n\t\t\tcanvas2D.recalculate();\n\t\t\tcanvas2D._test_globalDraw_all();\n\t\t\tRING.Renderer.ringController.setAngle(0);\n\t\t\tcollisions.setActiveIsland(FENCE.Collisions.IslandID(RING.Renderer.activeInstance, side));\n\t\t}.bind(BRIDGE),\n\t\t'set active side ' + side\n\t);\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\tsafeApply.apply();\n};\n\nBRIDGE.zoomCanvas = function(delta){\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\treturn canvas2D && canvas2D.canRender && RING.Renderer.Status.query(RING.RENDERER_STATUS_RUNNING) && renderer.hasRingInstance(null);\n\t\t}.bind(BRIDGE),\n\t\tfunction () {\n\t\t\tif(canvas2D.zoom(delta)){\n\t\t\t\tcanvas2D.recalculate();\n\t\t\t\tcanvas2D.updateViewport();\n\t\t\t\tcanvas2D.refresh();\n\t\t\t}\n\t\t}.bind(BRIDGE),\n\t\t'set zoom delta' + delta\n\t);\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\tsafeApply.apply();\n};\n\nBRIDGE.setMode = function(mode){\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\treturn RING.Renderer.Status.query(RING.RENDERER_STATUS_RUNNING) && renderer.hasActiveRingInstance();\n\t\t}.bind(BRIDGE),\n\t\tfunction(){\n\t\t\trenderer.setMode(mode);\n\t\t}.bind(BRIDGE),\n\t\t'set mode ' + mode\n\t);\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\tsafeApply.apply();\n};\n\nBRIDGE.presentRing = function(id){\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\treturn RING.Renderer.Status.query(RING.RENDERER_STATUS_RUNNING) && renderer.hasRingInstance(id);\n\t\t}.bind(BRIDGE),\n\t\tfunction(){\n\t\t\trenderer.presentRing(id);\n\t\t}.bind(BRIDGE),\n\t\t'present ring ' + id\n\t);\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\tsafeApply.apply();\n};\n\nBRIDGE.setAngle = function(angle){\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\treturn RING.Renderer.Status.query(RING.RENDERER_STATUS_RUNNING);\n\t\t}.bind(BRIDGE),\n\t\tfunction(){\n\t\t\tRING.Renderer.ringController.setAngle(angle);\n\t\t}.bind(BRIDGE),\n\t\t'set angle ' + angle\n\t);\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\tsafeApply.apply();\n};\n\nBRIDGE.addFeature = function(feature){\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\treturn canvas2D && canvas2D.canRender && RING.Renderer.Status.query(RING.RENDERER_STATUS_RUNNING) && renderer.hasRingInstance(null);\n\t\t}.bind(BRIDGE),\n\t\tfunction(){\n\t\t\tcanvas2D.addFeature(feature);\n\t\t\tcollisions.updateShape(FENCE.Collisions.ActiveIsland, feature);\n\t\t}.bind(BRIDGE),\n\t\t'add feature ' + feature.id\n\t);\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\tsafeApply.apply();\n};\n\nBRIDGE.addFeatures = function(features){\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\treturn canvas2D && canvas2D.canRender && RING.Renderer.Status.query(RING.RENDERER_STATUS_RUNNING) && renderer.hasRingInstance(null);\n\t\t}.bind(BRIDGE),\n\t\tfunction(){\n\t\t\tcanvas2D.addFeatures(features);\n\t\t}.bind(BRIDGE),\n\t\t'add features bulk'\n\t);\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\tsafeApply.apply();\n};\n\nBRIDGE.removeFeature = function(id){\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\treturn canvas2D && canvas2D.canRender;\n\t\t}.bind(BRIDGE),\n\t\tfunction(){\n\t\t\tcanvas2D.removeFeature(id);\n\t\t\tcollisions.removeShape(id);\n\t\t}.bind(BRIDGE),\n\t\t'remove feature ' + id\n\t);\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\tsafeApply.apply();\n};\n\nBRIDGE.updateDiamonds = function(ringID, ringSide, diamondData, nextFrame){\n\tif(nextFrame == undefined)\n\t\tnextFrame = false;\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\treturn renderer && renderer.hasRingInstance(ringID);\n\t\t}.bind(BRIDGE),\n\t\tfunction(){\n\t\t\t//Currently no diamonds supported on the inside, so we ignore\n\t\t\tif(ringSide == 1)\n\t\t\t\treturn;\n\t\t\tvar collisionExclude = BRIDGE.getCollidingFeatures(ringID, 1);\n\t\t\tfor(var i = 0 ; i < collisionExclude.length; i++){\n\t\t\t\tif(diamondData.guid == collisionExclude[i]){\n\t\t\t\t\tdiamondData.diamonds = null;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\trenderer.evalDiamonds(ringID, diamondData);\n\t\t}.bind(BRIDGE),\n\t\t'update diamonds for ' + ringID\n\t);\n\tif(SAFE_APPLY && nextFrame){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\tsafeApply.apply();\n};\n\nBRIDGE.setActiveFeature = function(id){\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\treturn canvas2D && canvas2D.canRender && /*a bit shady*/ canvas2D.elements.length > 0;\n\t\t}.bind(BRIDGE),\n\t\tfunction(){\n\t\t\tvar collisionList = collisions.getCollidingFeatures();\n\t\t\tvar feature;\n\t\t\tif(CANVAS.Surface2D.ActiveFeature){\n\t\t\t\tfeature = canvas2D.elements._find(CANVAS.Surface2D.ActiveFeature);\n\t\t\t\tif(feature){\n\t\t\t\t\tvar color = (collisionList.indexOf(CANVAS.Surface2D.ActiveFeature) != -1 ? CANVAS.Surface2D.FeatureColorCollision : CANVAS.Surface2D.FeatureColor);\n\t\t\t\t\tvar opacity = (collisionList.indexOf(CANVAS.Surface2D.ActiveFeature) != -1 ? CANVAS.Surface2D.FeatureColorOpacity : CANVAS.Surface2D.FeatureOpacity);\n\t\t\t\t\tfeature.setColor(color, opacity);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfeature = canvas2D.elements._find(id);\n\t\t\tif(feature){\n\t\t\t\tvar color = (collisionList.indexOf(id) != -1 ? CANVAS.Surface2D.SelectedFeatureColorCollision : CANVAS.Surface2D.SelectedFeatureColor);\n\t\t\t\tvar opacity = (collisionList.indexOf(id) != -1 ? CANVAS.Surface2D.SelectedFeatureColorOpacity : CANVAS.Surface2D.SelectedFeatureOpacity);\n\t\t\t\tfeature.setColor(color, opacity);\n\t\t\t}\n\n\t\t\tcanvas2D.setActiveFeature(id);\n\t\t}.bind(BRIDGE),\n\t\t'set active feature ' + id\n\t);\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\tsafeApply.apply();\n};\n\nBRIDGE.setDisplacement = function(id, inside, outside, displacementFinishedCb){\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\treturn (RING.Renderer.Status.query(RING.RENDERER_STATUS_RUNNING)) && renderer.hasRingInstance(id);\n\t\t}.bind(BRIDGE),\n\t\tfunction(){\n\t\t\t// if(outside)\n\t\t\t// \tconsole.warn(outside.heightMap);\n\t\t\tif(inside)\n\t\t\t\trenderer.updateFeatures(id, 0, inside.heightMap, inside.normalMap, outside == undefined ? displacementFinishedCb : undefined);\n\t\t\tif(outside){\n\t\t\t\trenderer.updateFeatures(id, 1, outside.heightMap, outside.normalMap, displacementFinishedCb);\n\t\t\t}\n\n\t\t}.bind(BRIDGE),\n\t\t'set displacement ' + id\n\t);\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\tsafeApply.apply();\n};\n\nBRIDGE.clearDisplacement = function(id, inside, outside, displacementFinishedCb){\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\treturn (RING.Renderer.Status.canRender()/*RING.Renderer.Status.query(RING.RENDERER_STATUS_RUNNING)*/ || RING.Renderer.Status.query(RING.RENDERER_STATUS_READY)) && renderer.hasRingInstance(id);\n\t\t}.bind(BRIDGE),\n\t\tfunction(){\n\t\t\tif(inside)\n\t\t\t\trenderer.clearFeatures(id, 0 );\n\t\t\tif(outside){\n\t\t\t\trenderer.clearFeatures(id, 1, displacementFinishedCb);\n\t\t\t}\n\n\t\t}.bind(BRIDGE),\n\t\t'clear displacement ' + id\n\t);\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\tsafeApply.apply();\n};\n\nBRIDGE.getCollisionPolygons = function (ringID, ringSide) {\n    return collisions.getCollisionPolygons(FENCE.Collisions.IslandID(ringID, ringSide));\n};\n\nBRIDGE.getCollidingFeatures = function(ringID, ringSide){\n\treturn collisions.getCollidingFeatures(FENCE.Collisions.IslandID(ringID, ringSide));\n};\n\nBRIDGE.screenshot = function(renderID, width, height, id, callback){\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\tvar hasIDs = true;\n\t\t\tif(id.constructor === Array)\n\t\t\t\tfor(var i = 0 ; i < id.length; i++)\n\t\t\t\t\thasIDs &= renderer.hasRingInstance(id[i]);\n\t\t\telse\n\t\t\t\thasIDs = renderer.hasRingInstance(id)\n\t\t\treturn RING.Renderer.Status.query(RING.RENDERER_STATUS_RUNNING) && hasIDs;\n\t\t}.bind(BRIDGE),\n\t\tfunction () {\n\t\t    RING.Renderer.Status.set(RING.RENDERER_STATUS_OFFSCREEN);\n\t\t    renderer.screenshot(renderID, width, height, id);\n\t\t    renderer.offscreenRenderBatch.addCallback(function (data) {\n\t\t        callback(data);\n\t\t        RING.Renderer.Status.set(RING.RENDERER_STATUS_RUNNING);\n\t\t    });\n\t\t}.bind(BRIDGE),\n\t\t'screenshot '\n\t);\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\tsafeApply.apply();\n};\n\nBRIDGE.screenshotBatch = function(ringIDs, width, height, callback){\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\tvar hasIDs = true;\n\t\t\tfor(var k = 0; k < ringIDs.length; k++){\n\t\t\t\tif(ringIDs[k].constructor === Array)\n\t\t\t\t\tfor(var i = 0 ; i < ringIDs[k].length; i++)\n\t\t\t\t\t\thasIDs &= renderer.hasRingInstance(ringIDs[k][i]);\n\t\t\t\telse\n\t\t\t\t\thasIDs = renderer.hasRingInstance(ringIDs[k])\n\t\t\t}\n\t\t\treturn RING.Renderer.Status.query(RING.RENDERER_STATUS_RUNNING) && hasIDs;\n\t\t}.bind(BRIDGE),\n\t\tfunction(){\n\t\t\tRING.Renderer.Status.set(RING.RENDERER_STATUS_OFFSCREEN);\n\t\t\tfor(var k = 0; k < ringIDs.length; k++){\n\t\t\t\tvar id='';\n\t\t\t\tif(ringIDs[k].constructor === Array)\n\t\t\t\t\tfor(var i = 0 ; i < ringIDs[k].length; i++)\n\t\t\t\t\t\tid += ringIDs[k][i];\n\t\t\t\telse\n\t\t\t\t\tid = ringIDs[k];\n\t\t\t\trenderer.screenshot(id, width, height, ringIDs[k]);\n\t\t\t}\n\t\t\trenderer.offscreenRenderBatch.addCallback(function(data){\n\t\t\t\tcallback(data);\n\t\t\t\tRING.Renderer.Status.set(RING.RENDERER_STATUS_RUNNING);\n\t\t\t});\n\t\t}.bind(BRIDGE),\n\t\t'screenshot batch'\n\t);\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\tsafeApply.apply();\n};\n\nBRIDGE.screenshotSession = function(ringIDs, width, height, callback){\n\tvar safeApply = new BRIDGE.SafeApply(\n\t\tfunction(){\n\t\t\tvar hasIDs = true;\n\t\t\tfor(var k = 0; k < ringIDs.length; k++){\n\t\t\t\tif(ringIDs[k].constructor === Array)\n\t\t\t\t\tfor(var i = 0 ; i < ringIDs[k].length; i++)\n\t\t\t\t\t\thasIDs &= renderer.hasRingInstance(ringIDs[k][i]);\n\t\t\t\telse\n\t\t\t\t\thasIDs = renderer.hasRingInstance(ringIDs[k])\n\t\t\t}\n\t\t\treturn RING.Renderer.Status.canRender()/*RING.Renderer.Status.query(RING.RENDERER_STATUS_RUNNING)*/ && hasIDs;\n\t\t}.bind(BRIDGE),\n\t\tfunction(){\n\t\t\tRING.Renderer.Status.set(RING.RENDERER_STATUS_OFFSCREEN);\n\t\t\tfor(var k = 0; k < ringIDs.length; k++){\n\t\t\t\tvar id='';\n\t\t\t\tif(ringIDs[k].constructor === Array)\n\t\t\t\t\tfor(var i = 0 ; i < ringIDs[k].length; i++)\n\t\t\t\t\t\tid += ringIDs[k][i];\n\t\t\t\telse\n\t\t\t\t\tid = ringIDs[k];\n\t\t\t\trenderer.screenshot(id, width, height, ringIDs[k]);\n\t\t\t}\n\t\t\trenderer.offscreenRenderBatch.addCallback(function(data){\n\t\t\t\tcallback(data);\n\t\t\t});\n\t\t}.bind(BRIDGE),\n\t\t'screenshot batch'\n\t);\n\tif(SAFE_APPLY){\n\t\tsafeApplyList.push(safeApply);\n\t\treturn;\n\t}\n\tsafeApply.apply();\n};\n\n// BRIDGE.makeAlphaMap = function(){\n// \tvar safeApply = new BRIDGE.SafeApply(\n// \t\tfunction(){\n// \t\t\treturn (RING.Renderer.Status.query(RING.RENDERER_STATUS_RUNNING));\n// \t\t}.bind(BRIDGE),\n// \t\tfunction(){\n// \t\t\t//Create surface and feature\n// \t\t    var surface = BRIDGE.getDrawableSurface();\n// \t\t    var feature = new CANVAS.ObliqueLineFeature(THREE.Math.generateUUID(), CANVAS.ObliqueLineFeature.DefaultsNoDiamonds);\n// \t\t    feature.constraints.apply();\n\n// \t\t    surface.onDraw = function(){\n// \t\t        //console.warn('Child Surface update');\n// \t\t        feature.setColor(\"rgb(191, 191, 191)\", 1.0);\n// \t\t        feature.draw(surface);\n// \t\t        if(!feature.dirty){\n// \t\t            surface.onDraw = undefined;\n// \t\t            //console.warn('Draw time -> ', performance.now() - drawStart);\n// \t\t            SVG_to_Base64(surface._surface_global.node, RING.HEIGHTMAP_WIDTH, RING.HEIGHTMAP_HEIGHT, function(imageSrc){\n// \t\t                //console.warn('SVG time -> ', performance.now() - svgStart);\n// \t\t                surface.release();\n// \t\t                console.warn('ALPHA MAP');\n// \t\t                console.warn(imageSrc.split(',')[1]);\n// \t\t            });\n// \t\t        }\n// \t\t    }\n// \t\t}.bind(BRIDGE),\n// \t\t'make alpha map '\n// \t);\n// \tif(SAFE_APPLY){\n// \t\tsafeApplyList.push(safeApply);\n// \t\treturn;\n// \t}\n// \tsafeApply.apply();\n// };\n\nBRIDGE.onCollisionEvent = function(prev, current, islandID) {\n\tvar exclusions = [];\n\tvar inclusions = [];\n\tfor(var e = 0; e < prev.length; e++){\n\t\tif(current.indexOf(prev[e]) == -1){\n\t\t\texclusions.push(prev[e]);\n\t\t}\n\t}\n\tfor(var e = 0; e < current.length; e++){\n\t\tif(prev.indexOf(current[e]) == -1){\n\t\t\tinclusions.push(current[e]);\n\t\t}\n\t}\n\t// console.log('Collision coloring -> ', inclusions.length);\n\n\tfor(var c = 0; c < inclusions.length; c++){\n\t\tvar _feature = canvas2D.elements._find(inclusions[c]);\n\t\tif(_feature){\n\t\t\tif(_feature.id == CANVAS.Surface2D.ActiveFeature)\n\t\t\t\t_feature.setColor(CANVAS.Surface2D.SelectedFeatureColorCollision, CANVAS.Surface2D.SelectedFeatureOpacityCollision);\n\t\t\telse\n\t\t\t\t_feature.setColor(CANVAS.Surface2D.FeatureColorCollision, CANVAS.Surface2D.FeatureOpacityCollision);\n\t\t}\n\t\tvar _collider = collisions.find(islandID, inclusions[c]);\n\t\tif(_collider){\n\t\t\t_collider.setColor(FENCE.Collisions.BoxColorCollision, FENCE.Collisions.BoxOpacityCollision);\n\t\t}\n\t}\n\tfor(var c = 0; c < exclusions.length; c++){\n\t\tvar _feature = canvas2D.elements._find(exclusions[c]);\n\t\tif(_feature){\n\t\t\tif(_feature.id == CANVAS.Surface2D.ActiveFeature)\n\t\t\t\t_feature.setColor(CANVAS.Surface2D.SelectedFeatureColor, CANVAS.Surface2D.SelectedFeatureOpacity);\n\t\t\telse\n\t\t\t\t_feature.setColor(CANVAS.Surface2D.FeatureColor, CANVAS.Surface2D.FeatureOpacity);\n\t\t}\n\t\tvar _collider = collisions.find(islandID, exclusions[c]);\n\t\tif(_collider){\n\t\t\t_collider.setColor(FENCE.Collisions.BoxColorNoCollision, FENCE.Collisions.BoxOpacityNoCollision);\n\t\t}\n\t}\n\n\tif(current.length > 0 && prev.length == 0){\n\t\tBRIDGE.onCollisionStatusChanged(collisions.getGlobalCollision());\n\t}\n\n\tif(prev.length > 0 && current.length == 0){\n\t\tBRIDGE.onCollisionStatusChanged(collisions.getGlobalCollision());\n\t}\n};\n\n\nBRIDGE.PackFeature = function(feature, forAdd){\n\tswitch(feature.name){\n\t\tcase 'straightLine' : return CANVAS.LineFeature.Pack(feature.model);\n\t\tcase 'fingerprint' : return CANVAS.FingerprintFeature.Pack(feature.model);\n\t\tcase 'ThickHeartbeat' : var ret = forAdd? CANVAS.ECGFeature.PackForAdd(feature.model):CANVAS.ECGFeature.Pack(feature.model);\n\t\t\t\t\t\t\t\treturn ret;\n\t\tcase 'Text': return CANVAS.TextFeature.Pack(feature.model);\n\t\tcase 'SineWave': return CANVAS.WaveFeature.Pack(feature.model);\n\t\tcase 'pattern': return CANVAS.PatternFeature.Pack(feature.model);\n\t\tcase 'DiamondPattern': return CANVAS.DiamondPatternFeature.Pack(feature.model);\n\t\tcase 'ObliqueLine': return CANVAS.ObliqueLineFeature.Pack(feature.model);\n\t\tcase 'Handwriting': return CANVAS.HandwritingFeature.Pack(feature.model);\n\t\tcase 'NaturePattern': return CANVAS.NaturePatternFeature.Pack(feature.model);\n\t}\n};\n\nBRIDGE.UnpackFeature = function(source){\n\tswitch(source.name){\n\t\tcase 'StraightLine' : return CANVAS.LineFeature.Unpack(source);\n\t\tcase 'Fingerprint' : return CANVAS.FingerprintFeature.Unpack(source);\n\t\tcase 'ThickHeartbeat' : return CANVAS.ECGFeature.Unpack(source);\n\t\tcase 'Text': return CANVAS.TextFeature.Unpack(source);\n\t\tcase 'SineWave': return CANVAS.WaveFeature.Unpack(source);\n\t\tcase 'Pattern': return CANVAS.PatternFeature.Unpack(source);\n\t\tcase 'DiamondPattern': return CANVAS.DiamondPatternFeature.Unpack(source);\n\t\tcase 'ObliqueLine' : return CANVAS.ObliqueLineFeature.Unpack(source);\n\t\tcase 'Handwriting': return CANVAS.HandwritingFeature.Unpack(source);\n\t\tcase 'NaturePattern': return CANVAS.NaturePatternFeature.Unpack(source);\n\t}\n}\n\nBRIDGE.Synchronization = {\n\t_syncSources : {},\n\taddSyncSource: function(id){\n\t\tif(this._syncSources.hasOwnProperty(id)){\n\t\t\tLogger.push('Trying to add duplicate synchronization source: ' + id);\n\t\t\treturn;\n\t\t}\n\t\tthis._syncSources[id] = false;\n\t},\n\tremoveSyncSource: function(id){\n\t\tdelete this._syncSources[id];\n\t},\n\tdesynchronize: function(id){\n\t\tif(id == undefined){\n\t\t\tfor(var source in this._syncSources){\n\t\t\t\tif(this._syncSources.hasOwnProperty(source))\n\t\t\t\t\tthis._syncSources[source] = false;\n\t\t\t}\n\t\t\tLogger.push('Desynchronized all sources');\n\t\t\treturn;\n\t\t}\n\t\tif(!this._syncSources.hasOwnProperty(id)){\n\t\t\tLogger.push('Trying to desync inexistent source: ' + id);\n\t\t\treturn;\n\t\t}\n\t\tLogger.push('Desynchronized source: ' + id);\n\t\tthis._syncSources[id] = false;\n\t},\n\tsynchronize: function(id){\n\t\tif(id == undefined){\n\t\t\tfor(var source in this._syncSources){\n\t\t\t\tif(this._syncSources.hasOwnProperty(source))\n\t\t\t\t\tthis._syncSources[source] = true;\n\t\t\t}\n\t\t\tLogger.push('Synchronized all sources');\n\t\t\treturn;\n\t\t}\n\t\tif(!this._syncSources.hasOwnProperty(id)){\n\t\t\tLogger.push('Trying to sync inexistent source: ' + id);\n\t\t\treturn;\n\t\t}\n\t\tLogger.push('Synchronized source: ' + id);\n\t\tthis._syncSources[id] = true;\n\t},\n\tquery: function(id){\n\t\tif(id == undefined){\n\t\t\tvar res = true;\n\t\t\tfor(var source in this._syncSources){\n\t\t\t\tif(this._syncSources.hasOwnProperty(source))\n\t\t\t\t\tres &= this._syncSources[source];\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\treturn this._syncSources[source];\n\t}\n};\n\nBRIDGE.update = function(){\n    canvas2D.update();\n    collisions.update(canvas2D.drawList);\n    collisions.draw(canvas2D._surface_global);\n    canvas2D.draw();\n    renderer.update();\n    for(var i = 0 ; i < safeApplyList.length ; i++){\n    \tif(safeApplyList[i].test())\n    \t{\n    \t\t//console.log('~ASYNC~ ', safeApplyList[i].name);\n    \t\tLogger.push(safeApplyList[i].name, Logger.DEBUG);\n    \t\tsafeApplyList[i].apply();\n    \t\tsafeApplyList.splice(i--,1);\n    \t\ti=-1;\n    \t}\n    }\n    nextFrameID = requestAnimationFrame( BRIDGE.update );\n    renderer.postUpdate();\n    var log = Logger.flush();\n    if(log)\n    \tBRIDGE.flushLog(log);\n    frameCount++;\n};\n\nBRIDGE.SafeApply = function(condition, call, name, callback){\n\tthis.name = name;\n\tthis.type = 'SafeApply';\n\n\tthis.condition = condition;\n\tthis.virtual_call = call;\n\tthis.callback = callback;\n};\n\nBRIDGE.SafeApply.WaitFrames = function(frames, condition, execution, id){\n\tvar _frames = frames;\n\tvar _apply = new BRIDGE.SafeApply(\n\t\tfunction(frames){\n\t\t\tvar state = condition();\n\t\t\tif(state && this.frameCondition === undefined){\n\t\t\t\tthis.frameCondition = frameCount + _frames;\n\t\t\t}\n\t\t\t// if(state)\n\t\t\t// \tLogger.push('Trying wait frames-> target: ' + this.frameCondition + ' current -> ' + frameCount, Logger.DEBUG);\n\t\t\treturn state && this.frameCondition <= frameCount;\n\t\t},\n\t\texecution,\n\t\t'WaitFrames ' + frames + (id != undefined ? id : '')\n\t);\n\treturn _apply;\n};\n\n\nBRIDGE.SafeApply.prototype = {\n\tconstructor: BRIDGE.SafeApply,\n\n\ttest: function(){\n\t\treturn this.condition();\n\t},\n\n\tapply: function(){\n\t\tthis.virtual_call();\n\t\tif(this.callback){\n\t\t\tthis.callback();\n\t\t}\n\t}\n};\n\nBRIDGE.reloadConfirmation = function() {\n    if(!BRIDGE.Synchronization.query()) {\n        var answer = confirm(\"Are you sure you want to leave?\");\n        if(!answer) {\n            return false;\n        }\n    }\n}\n\nwindow.onbeforeunload = function () {\n    return BRIDGE.reloadConfirmation();\n}\n",
			"file": "/home/busyalex/Insignety Designer/designer/src/webgl/api/Bridge.js",
			"file_size": 31092,
			"file_write_time": 131604881918422625,
			"settings":
			{
				"buffer_size": 31092,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "var CIRCUMFERENCE_SET = [44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75];\nvar WIDTH_SET = [3,4,5,6,7,8];\nvar FINISH_SET = [RING.FINISH_HIGHGLOSS, RING.FINISH_SATIN_MATTE, RING.FINISH_ICE_MATTE];\nvar EXTERIOR_PROFILE_SET = [RING.PROFILE_A, RING.PROFILE_B, RING.PROFILE_C];\nvar ENGRAVING_COLOR_SET = [\n\t\"#e9d4a0\",\n\t\"#b6b6b6\",\n\t\"#e8e8e8\",\n\t\"#e8bc9c\"\n];\nvar MATERIAL_SET = [\n\t{name: \"Gold 9k\", color: \"Yellow\"},\n\t{name: \"Gold 9k\", color: \"Red\"},\n\t{name: \"Gold 9k\", color: \"White\"},\n\t{name: \"Gold 9k\", color: \"Rhodium\"},\n\t{name: \"Gold 14k\", color: \"Yellow\"},\n\t{name: \"Gold 14k\", color: \"Red\"},\n\t{name: \"Gold 14k\", color: \"Rose\"},\n\t{name: \"Gold 14k\", color: \"White\"},\n\t{name: \"Gold 14k\", color: \"Rhodium\"},\n\t{name: \"Gold 18k\", color: \"Yellow\"},\n\t{name: \"Gold 18k\", color: \"Red\"},\n\t{name: \"Gold 18k\", color: \"Rose\"},\n\t{name: \"Gold 18k\", color: \"White\"},\n\t{name: \"Gold 18k\", color: \"Rhodium\"},\n\t{name: \"Platinum\", color: \"White\"}\n];\n\nvar GEOMETRY_PARAMETRIC_A = {\n\turl : ['assets/obj/circ/A_smallest.obj', 'assets/obj/circ/A_largest.obj'],\n\tmeshType : RING.GeometryDescriptor.MESH_TYPE_OUTER_360_A\n};\nvar GEOMETRY_PARAMETRIC_B = {\n\turl : ['assets/obj/circ/B_smallest.obj', 'assets/obj/circ/B_largest.obj'],\n\tmeshType : RING.GeometryDescriptor.MESH_TYPE_OUTER_360_B\n};\nvar GEOMETRY_PARAMETRIC_C = {\n\turl : ['assets/obj/circ/C_smallest.obj', 'assets/obj/circ/C_largest.obj'],\n\tmeshType : RING.GeometryDescriptor.MESH_TYPE_OUTER_360_C\n};\nvar GEOMETRY_PARAMETRIC_INSIDE = {\n\turl : ['assets/obj/circ/inside_smallest.obj', 'assets/obj/circ/inside_largest.obj'],\n\tmeshType : RING.GeometryDescriptor.MESH_TYPE_INNER_360\n};\n\nvar GEOMETRY_PARAMETRIC_EXTERIOR = function(profile){\n\tswitch(profile){\n\t\tcase RING.PROFILE_A: return GEOMETRY_PARAMETRIC_A;\n\t\tcase RING.PROFILE_B: return GEOMETRY_PARAMETRIC_B;\n\t\tcase RING.PROFILE_C: return GEOMETRY_PARAMETRIC_C;\n\t}\n}\n\nvar GEOMETRY_FULL_PARAMETRIC =  function(profile){\n\tvar exterior = GEOMETRY_PARAMETRIC_EXTERIOR(profile);\n\tvar interior =  GEOMETRY_PARAMETRIC_INSIDE;\n\treturn [exterior, interior];\n}\n\nfunction randomCircumference(){\n\treturn CIRCUMFERENCE_SET[new Alea(performance.now()).range(0, CIRCUMFERENCE_SET.length-1)];\n}\n\nfunction randomWidth(){\n\treturn WIDTH_SET[new Alea(performance.now()).range(0, WIDTH_SET.length-1)];\n}\n\nfunction randomExteriorProfile(){\n\treturn EXTERIOR_PROFILE_SET[new Alea(performance.now()).range(0, EXTERIOR_PROFILE_SET.length-1)];\n}\n\nfunction randomFinish(){\n\treturn FINISH_SET[new Alea(performance.now()).range(0, FINISH_SET.length-1)];\n}\n\nfunction randomEngravingColor(){\n\treturn ENGRAVING_COLOR_SET[new Alea(performance.now()).range(0, ENGRAVING_COLOR_SET.length-1)];\n}\n\nfunction randomMaterial(){\n\treturn MATERIAL_SET[new Alea(performance.now()).range(0, MATERIAL_SET.length-1)];\n}\n\n\n\nfunction randomRingEnumerable(geometryDescriptorList){\n\tvar obj = {};\n\tobj['profile'] = randomExteriorProfile();\n\tobj['width'] = randomWidth();\n\tobj['circumference'] = randomCircumference();\n\tobj['material'] = randomMaterial();\n\tobj['finish'] = randomFinish();\n\tobj['engravingColor'] = randomEngravingColor();\n\tobj['geometryDescriptors'] = geometryDescriptorList ? geometryDescriptorList : GEOMETRY_FULL_PARAMETRIC(obj['profile']);\n\treturn obj;\n}\n\nfunction randomRingDescriptor(){\n\treturn new RING.RingDescriptor().fromEnumerable(randomRingEnumerable());\n}\n\nfunction randomGeometryDescriptor(){\n\treturn [GEOMETRY_PARAMETRIC_A, GEOMETRY_PARAMETRIC_B, GEOMETRY_PARAMETRIC_C, GEOMETRY_PARAMETRIC_INSIDE][new Alea(performance.now()).range(0, 4-1)];\n}\n\nfunction randomMaterialDescriptor(){\n\treturn MATERIAL_SET[new Alea(performance.now()).range(0, MATERIAL_SET.length-1)];\n}",
			"file": "/home/busyalex/Insignety Designer/designer/src/webgl/model/RingDescriptorUtils.js",
			"file_size": 3670,
			"file_write_time": 131604899797381791,
			"settings":
			{
				"buffer_size": 3670,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "RING.MaterialDescriptor = function () {\n\tthis.type = \"MaterialDescriptor\";\n\n\tthis.name = undefined;\n\tthis.color = undefined;\n};\n\nRING.MaterialDescriptor.prototype = {\n\tconstructor: RING.MaterialDescriptor,\n\n\tfromServerModel: function(material){\n\t\tthis.name = material.name;\n\t\tthis.color = material.color;\n\t\treturn this;\n\t},\n\n\n\ttoServerModel: function(material){\n\t\tvar model = {\n\t\t\tname: this.name,\n\t\t\tcolor: this.color\n\t\t};\n\t\tif(material != undefined){\n\t\t\tObject.assign(material, model);\n\t\t}\n\t\treturn model;\n\t},\n\n\tfromEnumerable: function(object){\n\t\treturn Object.assign(this, object);\n\t},\n\n\ttoEnumerable: function(object){\n\t\tvar model = {\n\t\t\tname: this.name,\n\t\t\tcolor: this.color\n\t\t};\n\t\tif(object != undefined){\n\t\t\tObject.assign(object, model);\n\t\t}\n\t\treturn model;\n\t},\n\n\tdiff: function(descriptor){\n\t\tvar diff = {};\n\t\tvar other = descriptor.toEnumerable();\n    \tfor(var property in other){\n    \t\tif(other[property] == undefined)\n    \t\t\tcontinue;\n    \t\tdiff[property] = (other[property] == this[property] ? undefined : other[property]);\n    \t}\n\t \treturn diff;\n\t},\n\n\tisVoid: function(){\n\t\treturn this.name == undefined && this.color == undefined;\n\t}\n}",
			"file": "/home/busyalex/Insignety Designer/designer/src/webgl/model/MaterialDescriptor.js",
			"file_size": 1150,
			"file_write_time": 131604939753419929,
			"settings":
			{
				"buffer_size": 1150,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "RING.RingDescriptor = function () {\n\tthis.type = \"RingDescriptor\";\n\n\tthis.profile = undefined;\n\tthis.width = undefined;\n\tthis.circumference = undefined;\n\tthis.material = undefined;\n\tthis.finish = undefined;\n\tthis.engravingColor = undefined;\n\tthis.geometryDescriptors = undefined;\n};\n\n\nRING.RingDescriptor.prototype = {\n\n    constructor: RING.RingDescriptor,\n    \n    fromServerModel: function(artifact){\n    \tthis.profile = artifact.shape.profile;\n\t\tthis.width = artifact.shape.width;\n\t\tthis.circumference = artifact.shape.innerCircumference;\n\t\tthis.material = new RING.MaterialDescriptor().fromServerModel(artifact.material);\n\t\tthis.finish = artifact.finish;\n\t\tthis.engravingColor = artifact.engravingColour;\n\t\tthis.geometryDescriptors = [];\n\n\t\t//This is where and how the servel model diverges\n\t\tif(artifact.freeForms.length > 0){\n\t\t\tfor(var i = 0 ; i < artifact.freeForms.length; i++){\n\t\t\t\tthis.geometryDescriptors.push(new RING.GeometryDescriptor().fromServerModel(artifact.freeForms[i]));\n\t\t\t}\t\n\t\t}\n\t\telse{\n\t\t\tthis.geometryDescriptors.push(RING.GeometryDescriptor.MakeCanonicalDescriptor(RING.GeometryDescriptor.MakeCanonicalMeshType(artifact.shape.profile, RING.GeometryDescriptor.RING_SIDE_EXTERIOR)));\n\t\t\tthis.geometryDescriptors.push(RING.GeometryDescriptor.MakeCanonicalDescriptor(RING.GeometryDescriptor.MakeCanonicalMeshType(undefined, RING.GeometryDescriptor.RING_SIDE_INTERIOR)));\n\t\t}\n\t\treturn this;\n    },\n\n    toServerModel: function(artifact){\n    \tvar out = {};\n    \tout.shape = {};\n    \tout.shape.profile = this.profile;\n\t\tout.shape.width = this.width;\n\t\tout.shape.innerCircumference = this.circumference;\n\t\tout.material = this.material.toServerModel();\n\n\t\tout.finish = this.finish;\n\t\tout.engravingColour = this.engravingColor;\n\t\tout.freeForms = [];\n\t\tif(this.geometryDescriptors){\n\t\t\tfor(var i = 0 ; i < this.geometryDescriptors.length; i++){\n\t\t\t\tif(!this.geometryDescriptors[i].canonical())\n\t\t\t\t\tout.geometryDescriptors.push(this.geometryDescriptors[i].toServerModel());\n\t\t\t}\n\t\t}\n\t\tif(artifact != undefined)\n\t\t\tObject.assign(artifact, out);\n\t\treturn out;\n    },\n\n    fromEnumerable: function(object){\n    \tthis.profile = object.profile;\n    \tthis.width = object.width;\n\t\tthis.circumference = object.circumference;\n\t\tthis.material = new RING.MaterialDescriptor().fromEnumerable(object.material);\n\t\tthis.finish = object.finish;\n\t\tthis.engravingColor = object.engravingColor;\n\t\t\n\t\tif(object.geometryDescriptors){\n\t\t\tthis.geometryDescriptors = [];\n\t\t\tif(object.geometryDescriptors.length > 0){\n\t\t    \tfor(var i = 0 ; i < object.geometryDescriptors.length; i++){\n\t\t    \t\tthis.geometryDescriptors[i] = new RING.GeometryDescriptor().fromEnumerable(object.geometryDescriptors[i]);\n\t\t    \t}\n\t\t    }\n\t\t    else{\n\t\t\t\tthis.geometryDescriptors.push(RING.GeometryDescriptor.MakeCanonicalDescriptor(RING.GeometryDescriptor.MakeCanonicalMeshType(object.profile, RING.GeometryDescriptor.RING_SIDE_EXTERIOR)));\n\t\t\t\tthis.geometryDescriptors.push(RING.GeometryDescriptor.MakeCanonicalDescriptor(RING.GeometryDescriptor.MakeCanonicalMeshType(undefined, RING.GeometryDescriptor.RING_SIDE_INTERIOR)));\n\t\t\t}\n\t\t}\n\t    return this;\n    },\n\n    toEnumerable: function(){\n    \tvar out = {\n    \t\tprofile: this.profile,\n    \t\twidth: this.width,\n    \t\tcircumference: this.circumference,\n    \t\tmaterial: this.material.toEnumerable(),\n    \t\tfinish: this.finish,\n    \t\tengravingColor: this.engravingColor,\n    \t}\n    \tif(this.geometryDescriptors){\n    \t\tout.geometryDescriptors = [];\n\t    \tfor(var i = 0 ; i < this.geometryDescriptors.length; i++){\n\t    \t\tout.geometryDescriptors[i] = this.geometryDescriptors[i].toEnumerable();\n\t    \t}\n\t    }\n    \treturn out;\n    },\n\n\n    diff: function(descriptor){\n    \tvar diff = {};\n    \tthis.diffEnumerables(descriptor, diff);\n    \tthis.diffMaterial(descriptor, diff);\n    \tthis.diffGeometryDescriptors(descriptor, diff);\n\t\treturn diff;\n    },\n\n    diffEnumerables: function(descriptor, outDiff){\n    \tvar enumerables = ['profile', 'width', 'circumference', 'finish', 'engravingColor'];\n    \tfor(var i = 0 ; i < enumerables.length; i++){\n    \t\tif(descriptor[enumerables[i]] == undefined){\n    \t\t\toutDiff[enumerables[i]] = this[enumerables[i]];\n    \t\t\tcontinue;\n    \t\t}\n    \t\toutDiff[enumerables[i]] = descriptor[enumerables[i]] == this[enumerables[i]] ? undefined : descriptor[enumerables[i]];\n    \t}\n    \treturn outDiff;\n    },\n\n    diffMaterial: function(descriptor, outDiff){\n    \toutDiff.material = this.material.diff(descriptor.material);\n    \treturn outDiff;\n    },\n\n    diffGeometryDescriptors: function(descriptor, outDiff){\n    \tif(descriptor.geometryDescriptors == undefined){\n    \t\toutDiff.geometryDescriptors = this.geometryDescriptors.slice().map(function(element){return element.toEnumerable();});\n    \t\treturn outDiff;\n    \t}\n    \tif(this.geometryDescriptors == undefined){\n    \t\toutDiff.geometryDescriptors = descriptor.geometryDescriptors.slice().map(function(element){return element.toEnumerable();});\n    \t\treturn outDiff;\n    \t}\n\t\tif(descriptor.geometryDescriptors.length != this.geometryDescriptors.length){\n\t\t\toutDiff.geometryDescriptors = descriptor.geometryDescriptors.slice().map(function(element){return element.toEnumerable();});\n    \t\treturn outDiff;\n\t\t}\n\t\tvar thisFlatUrls = [];\n\t\tthis.geometryDescriptors.forEach(function(element){\n\t\t\tif(element['url'].constructor === Array)\n\t\t\t\tthisFlatUrls = thisFlatUrls.concat(element['url']);\n\t\t\telse\n\t\t\t\tthisFlatUrls.push(element['url']);\n\t\t});\n\n\t\tvar otherFlatUrls = [];\n\t\tdescriptor.geometryDescriptors.forEach(function(element){\n\t\t\tif(element['url'].constructor === Array)\n\t\t\t\totherFlatUrls = otherFlatUrls.concat(element['url']);\n\t\t\telse\n\t\t\t\totherFlatUrls.push(element['url']);\n\t\t});\n\n\t\tthisFlatUrls.sort();\n\t\totherFlatUrls.sort();\n\t\tif(thisFlatUrls.length != otherFlatUrls.length){\n\t\t\toutDiff.geometryDescriptors = descriptor.geometryDescriptors.slice().map(function(element){return element.toEnumerable();});\n\t\t\treturn outDiff;\n\t\t}\n\n\t\tfor(var i = 0 ; i < thisFlatUrls.length; i++){\n\t\t\tif(thisFlatUrls[i] != otherFlatUrls[i]){\n\t\t\t\toutDiff.geometryDescriptors = descriptor.geometryDescriptors.slice().map(function(element){return element.toEnumerable();});\n\t\t\t\treturn outDiff;\n\t\t\t}\n\t\t}\n\t\toutDiff.geometryDescriptors = undefined;\n\t\treturn outDiff;\n\n    },\n\n\n    prettyPrint: function(){\n    \tconsole.warn(\"######### Ring Descriptor ###########\");\n    \tvar enumerable = this.toEnumerable();\n    \tfor(var property in enumerable)\n    \t\tconsole.warn(property, \" = \", enumerable[property]);\n    \tconsole.warn(\"#####################################\");\n    }\n}\n\n",
			"file": "/home/busyalex/Insignety Designer/designer/src/webgl/model/RingDescriptor.js",
			"file_size": 6555,
			"file_write_time": 131604881918422625,
			"settings":
			{
				"buffer_size": 6555,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "RING.RingModel = function (id) {\n\tthis.type = \"RingModel\";\n\n\tthis.id = id;\n\t\n\tthis.activeProfile = undefined;\n\tthis.activeWidth = undefined;\n\tthis.activeCircumference = undefined;\n\tthis.activeOuterCircumference = undefined;\n\n\tthis.activeMaterialName = undefined;\n\tthis.activeMaterialColor = undefined;\n\tthis.activeMaterialBase = undefined;\n\tthis.activeFinish = undefined;\n\tthis.activeEngravingColor = undefined;\n\n\tthis.diffuseColor = new THREE.Color(0.23, 0.27, 0.29);\n\tthis.specularColor = new THREE.Color(0.50, 0.54, 0.56);\n\tthis.reflectionColor = new THREE.Color(0.54, 0.58, 0.60);\n\tthis.engravingColor = new THREE.Color(0.70, 0.70, 0.70);\n\tthis.colorContributions = new THREE.Vector4(1.0, 1.0, 1.0, 1.0);\n\n\tthis.geometryModels = [];\n\n\tthis.onModelUpdated = undefined;\n};\n\nRING.RingModel.prototype = {\n\n    constructor: RING.RingModel,\n    \n    //########### API ##############\n    fromDescriptor: function(descriptor){\n    \tthis.setGeometry(descriptor.profile, descriptor.geometryDescriptors);\n    \tthis.setWidth(descriptor.width);\n    \tthis.setCircumference(descriptor.circumference);\n    \tthis.setMaterial(descriptor.material);\n    \tthis.setFinish(descriptor.finish);\n    \tthis.setEngravingColor(descriptor.engravingColor);\n    \tthis.modelLoadStep('N/A');\n    },\n\n    toDescriptor: function(descriptor){\n    \tvar _descriptor = new RING.RingDescriptor();\n    \t_descriptor.profile = this.activeProfile;\n\t\t_descriptor.width = this.activeWidth;\n\t\t_descriptor.circumference = this.activeCircumference;\n\t\t_descriptor.material = new RING.MaterialDescriptor().fromEnumerable({name: this.activeMaterialName, color: this.activeMaterialColor});\n\t\t_descriptor.finish = this.activeFinish;\n\t\t_descriptor.engravingColor = this.activeEngravingColor;\n\t\t_descriptor.geometryDescriptors = this.geometryModels.slice().map(function(element){ return element.toDescriptor(); });\n\t\t\n\t\treturn _descriptor;\n    },\n\n    isCanonical: function(){\n    \tvar canonical = this.geometryModels.length > 0;\n    \tfor(var i = 0 ; i < this.geometryModels.length; i++){\n    \t\tcanonical = canonical && (this.geometryModels[i].surfaceType == RING.GeometryDescriptor.SURRFACE_TYPE_PARAMETRIC);\n    \t}\n    \treturn canonical;\n    },\n\n    update: function(descriptor){\n    \tvar d1 = this.toDescriptor();\n    \tvar diff = d1.diff(descriptor);\n\t\tthis.fromDescriptor(new RING.RingDescriptor().fromEnumerable(diff));\n    },\n    \n    //#################################\n\n    setGeometry: function(profile, geometryDescriptors){\n    \tthis.setProfile(profile);\n\n    \tif(geometryDescriptors == undefined)\n    \t\treturn;\n    \t\n    \t//Release old geometry models\n    \tfor(var k = 0 ; k < this.geometryModels.length; k++){\n    \t\tthis.geometryModels[k].release();\n    \t}\n    \tthis.geometryModels = geometryDescriptors.slice().map(function(element){ return new RING.GeometryModel().fromDescriptor(element);});\n    \t\n    \t//Trigger geometry models loading\n    \tfor(var k = 0 ; k < this.geometryModels.length; k++){\n    \t\tthis.geometryModels[k].load(this.modelLoadStep.bind(this));\n    \t}\n    },\n\n    modelLoadStep: function(id){\n    \tconsole.warn(\"Loaded -> \", id);\n    \tvar geometryReady = true;\n\t\tfor(var m = 0 ; m < this.geometryModels.length; m++){\n\t\t\tgeometryReady = geometryReady && this.geometryModels[m].isReady();\n\t\t}\n\t\tif(geometryReady)\n\t\t\tif(this.onModelUpdated)\n\t\t\t\tthis.onModelUpdated();\n    },\n    \n    setProfile: function(value){\n    \tif(value == undefined)\n    \t\treturn;\n    \tthis.activeProfile = value;\n    },\n\n    setWidth: function(value){\n    \tif(value == undefined)\n    \t\treturn;\n\t\tthis.activeWidth = value;\n\t},\n\n\tsetCircumference: function(value){\n\t\tif(value == undefined)\n    \t\treturn;\n\t\tthis.activeCircumference = value;\n\t\tvar innerRadius = this.activeCircumference / (2 * Math.PI);\n\t\tswitch(this.activeProfile){\n\t\t\tcase RING.PROFILE_A: \n\t\t\t\tthis.activeOuterCircumference = (innerRadius + RING.PROFILE_A_CIRC_BASELINE_DELTA) * 2 * Math.PI;\n\t\t\t\tbreak;\n\t\t\tcase RING.PROFILE_B: \n\t\t\t\tthis.activeOuterCircumference = (innerRadius + RING.PROFILE_B_CIRC_BASELINE_DELTA) * 2 * Math.PI;\n\t\t\t\tbreak;\n\t\t\tcase RING.PROFILE_C: \n\t\t\t\tthis.activeOuterCircumference = (innerRadius + RING.PROFILE_C_CIRC_BASELINE_DELTA) * 2 * Math.PI;\n\t\t\t\tbreak;\n\t\t\tdefault: \n\t\t\t\tthis.activeOuterCircumference = -1;\n\t\t\t\tLogger.push(\"Cannot calculate Outer Circumference for undefined profile!\");\n\t\t}\n\t},\n\n\tsetMaterial: function(value){\n\t\tif(value.isVoid())\n    \t\treturn;\n\n\t\tvar materialBase;\n\n\t\tvar metal = value.name != undefined ? value.name : this.activeMaterialName;\n\t\tvar metalColor = value.color != undefined ? value.color : this.activeMaterialColor;\n\t\tswitch(metal){\n\t\t\tcase \"Platinum\": materialBase = RING.PLATINUM_WHITE;\n\t\t\t\t\t\t\t break;\n\t\t\tcase \"Silver\": switch(metalColor){\n\t\t\t\t\t\t\tcase \"White\": materialBase = RING.SILVER_WHITE;\n\t\t\t\t\t\t\t\t\t\t  break;\n\t\t\t\t\t\t\tcase \"Rhodium\": materialBase = RING.SILVER_RHODIUM_WHITE;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t    break;\n\t\t\tcase \"Gold 9k\": switch(metalColor){\n\t\t\t\t\t\t\t\tcase \"Yellow\": materialBase = RING.GOLD_9K_YELLOW;\n\t\t\t\t\t\t\t\t\t\t\t   break;\n\t\t\t\t\t\t\t\tcase \"Rose\": materialBase = RING.GOLD_9K_PINK;\n\t\t\t\t\t\t\t\t\t \t\t break;\n\t\t\t\t\t\t\t\tcase \"Red\": materialBase = RING.GOLD_9K_RED;\n\t\t\t\t\t\t\t\t\t \t\tbreak;\n\t\t\t\t\t\t\t\tcase \"White\": materialBase = RING.GOLD_9K_PALLADIUM;\n\t\t\t\t\t\t\t\t\t \t\t  break;\n\t\t\t\t\t\t\t\tcase \"Rhodium\": materialBase = RING.GOLD_9K_RHODIUM;\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t break;\n\t\t\tcase \"Gold 14k\": switch(metalColor){\n\t\t\t\t\t\t\t\tcase \"Yellow\": materialBase = RING.GOLD_14K_YELLOW;\n\t\t\t\t\t\t\t\t\t\t\t   break;\n\t\t\t\t\t\t\t\tcase \"Rose\": materialBase = RING.GOLD_14K_PINK;\n\t\t\t\t\t\t\t\t\t \t\t break;\n\t\t\t\t\t\t\t\tcase \"Red\": materialBase = RING.GOLD_14K_RED;\n\t\t\t\t\t\t\t\t\t \t\tbreak;\n\t\t\t\t\t\t\t\tcase \"White\": materialBase = RING.GOLD_14K_PALLADIUM;\n\t\t\t\t\t\t\t\t\t \t\t  break;\n\t\t\t\t\t\t\t\tcase \"Rhodium\": materialBase = RING.GOLD_14K_RHODIUM;\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t break;\n\t\t\tcase \"Gold 18k\": switch(metalColor){\n\t\t\t\t\t\t\t\tcase \"Yellow\": materialBase = RING.GOLD_18K_YELLOW;\n\t\t\t\t\t\t\t\t\t\t\t   break;\n\t\t\t\t\t\t\t\tcase \"Rose\": materialBase = RING.GOLD_18K_PINK;\n\t\t\t\t\t\t\t\t\t \t\t break;\n\t\t\t\t\t\t\t\tcase \"Red\": materialBase = RING.GOLD_18K_RED;\n\t\t\t\t\t\t\t\t\t \t\tbreak;\n\t\t\t\t\t\t\t\tcase \"White\": materialBase = RING.GOLD_18K_PALLADIUM;\n\t\t\t\t\t\t\t\t\t \t\t  break;\n\t\t\t\t\t\t\t\tcase \"Rhodium\": materialBase = RING.GOLD_18K_RHODIUM;\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t break;\n\t\t\tdefault: material = RING.GOLD_9K_YELLOW;\n\t\t\t\t\t break;\n\t\t}\n\t\tthis.activeMaterialName = metal;\n\t\tthis.activeMaterialColor = metalColor;\n\t\tthis.activeMaterial = materialBase;\n\n\t\tvar materialData = RING.RING_MATERIAL_DATA[materialBase];\n\t\tthis.diffuseColor = new THREE.Color(hexToRgb(materialData.diffuse));\n\t\tthis.specularColor = new THREE.Color(hexToRgb(materialData.specular));\n\t\tthis.reflectionColor = new THREE.Color(hexToRgb(materialData.reflection));\n\t\tthis.colorContributions.set(materialData.diffuse_contrib, materialData.specular_contrib, materialData.reflection_contrib, materialData.fresnelFactor);\n\t},\n\n\tsetFinish: function (value) {\n\t\tif(value == undefined)\n    \t\treturn;\n\t\tthis.activeFinish = value;\n\t},\n\n\tsetEngravingColor: function(value){\n\t\tif(value == undefined)\n    \t\treturn;\n\t\tthis.activeEngravingColor = value;\n\t\tthis.engravingColor = new THREE.Color(hexToRgb(value));\n\t},\n}",
			"file": "/home/busyalex/Insignety Designer/designer/src/webgl/model/RingModel.js",
			"file_size": 7168,
			"file_write_time": 131604952097579353,
			"settings":
			{
				"buffer_size": 7168,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Repository = function () {\n\n\t//Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\tthis.name = '';\n\tthis.type = 'Repository';\n\n\tthis.requiredAssets = null;\n\tthis.requiredAssetsCount = -1;\n\tthis.repositoryReadyCallback = null;\n\n\tthis.models = {};\n\tthis.textures = {};\n\tthis.cubemaps = {};\n\tthis.texture_data = {};\n\tthis.shaders = {};\n\n\tthis.isReady = false;\n\n\tthis.manager = new THREE.LoadingManager();\n\t// this.manager.onProgress = function ( item, loaded, total ) {\n\t// \t//console.log( item, loaded, total );\n\t// };\n\tthis.indexedOBJLoader = null;\n\tthis.OBJLoader = null;\n\tthis.textureLoader = null;\n\tthis.cubeTextureLoader = null;\n\n\tthis.UserBuffers = {\n\t\tset: function(data, id){\n\t\t\tif(id == undefined)\n\t\t\t\tid = THREE.Math.GenerateUUID();\n\t\t\tthis[id] = data;\n\t\t\treturn id;\n\t\t}\n\t};\n};\n\nRepository.INDEXED_MODEL = 0,\nRepository.MODEL = 1;\nRepository.TEXTURE = 2;\nRepository.CUBEMAP = 3;\nRepository.SHADER = 4;\nRepository.TEXTURE_DATA = 5;\nRepository.TEXTURE_AND_DATA = 6;\n\nRepository.prototype = {\n\n\tconstructor: Repository,\n\n\n\tsetRequiredAssets_local_: function(assets){\n\t\tthis.requiredAssets = assets;\n\t\tvar count = 0;\n\t\tassets.forEach(function(asset){\n\t\t\tcount += (asset.type == Repository.TEXTURE_AND_DATA) ? 2 : 1;\n\t\t});\n\t\tthis.requiredAssetsCount = count;\n\t},\n\n\tloadAll_local_: function(){\n\t\tif(this.isReady)\n\t\t\treturn;\n\t\tfor (var i = 0; i < this.requiredAssets.length; i++){\n\t\t\tthis.requestAsset(this.requiredAssets[i].type, this.requiredAssets[i].path, this.requiredAssets[i].id, this.pushAsset.bind(this));\n\t\t}\n\t},\n\n\tload: function(type, location, id, userCallback){\n\t\tvar asset = this.tryGetAsset(id, type);\n\t\tif(asset){\n\t\t\tuserCallback(type, asset, id);\n\t\t\treturn;\n\t\t}\n\t\tthis.requestAsset(type, location, id, function(type, asset, id){\n\t\t\tthis.pushAsset(type, asset, id); \n\t\t\tuserCallback(type, asset, id);\n\t\t}.bind(this));\n\t},\n\n\tpushAsset: function(type, asset, id){\n\t\t//console.warn(\"Adding -> \", id);\n\t\tswitch(type){\n\t\t\tcase Repository.INDEXED_MODEL:\n\t\t\t\tthis.models[id] = asset;\n\t\t\t\tbreak;\n\t\t\tcase Repository.MODEL:\n\t\t\t\tthis.models[id] = asset;\n\t\t\t\tbreak;\n\t\t\tcase Repository.TEXTURE:\n\t\t\t\tthis.textures[id] = asset;\n\t\t\t\tbreak;\n\t\t\tcase Repository.CUBEMAP:\n\t\t\t\tthis.cubemaps[id] = asset;\n\t\t\t\tbreak;\n\t\t\tcase Repository.TEXTURE_DATA:\n\t\t\t\tthis.texture_data[id] = asset;\n\t\t\t\tbreak;\n\t\t\tcase Repository.SHADER:\n\t\t\t\tthis.shaders[id] = asset;\n\t\t\t\tbreak;\n\t\t}\n\t\t//console.warn('Added asset type ', type, ' with id ', id, ' to repository');\n\t\tvar currentCount = Object.keys(this.models).length + \n\t\t\t\t\t\t   Object.keys(this.textures).length + \n\t\t\t\t\t\t   Object.keys(this.cubemaps).length + \n\t\t\t\t\t\t   Object.keys(this.texture_data).length +\n\t\t\t\t\t\t   Object.keys(this.shaders).length;\n\t    // console.warn(\"Required -> \", this.requiredAssetsCount, \" Current -> \", currentCount);\n\t\tif(currentCount == this.requiredAssetsCount)\n\t\t{\t\n\t\t\tthis.isReady = true;\n\t\t\tif(this.repositoryReadyCallback)\n\t\t\t\tthis.repositoryReadyCallback();\n\t\t}\n\t},\n\n\tgetAsset: function(id, type){\n\t\t//Lame, but I don't have the time to improve this\n\t\tvar asset = undefined;\n\t\tswitch(type){\n\t\t\tcase Repository.INDEXED_MODEL :\n\t\t\t\tasset = this.models[id];\n\t\t\t\tbreak;\n\t\t\tcase Repository.MODEL:\n\t\t\t\tasset = this.models[id];\n\t\t\t\tbreak;\n\t\t\tcase Repository.TEXTURE:\n\t\t\t\tasset = this.textures[id];\n\t\t\t\tbreak;\n\t\t\tcase Repository.CUBEMAP:\n\t\t\t\tasset = this.cubemaps[id];\n\t\t\t\tbreak;\n\t\t\tcase Repository.TEXTURE_DATA:\n\t\t\t\tasset = this.texture_data[id];\n\t\t\t\tbreak;\n\t\t\tcase Repository.SHADER:\n\t\t\t\tasset =  this.shaders[id];\n\t\t\t\tbreak;\n\t\t}\n\t\treturn asset;\n\t},\n\n\ttryGetAsset: function(id, type){\n\t\tvar asset = undefined;\n\t\tif(type != undefined)\n\t\t\treturn this.getAsset(id, type);\n\n\t\treturn this.models[id] || this.textures[id] || this.cubemaps[id] || this.texture_data[id] || this.shaders[id];\n\t},\n\n\trequestAsset: function(type, asset, id, onResponse){\n\t\tswitch(type){\n\t\t\tcase Repository.INDEXED_MODEL :\n\t\t\t\tif(this.indexedOBJLoader == null){\n\t\t\t\t\tthis.indexedOBJLoader = new IndexedOBJLoader( this.manager );\n\t\t\t\t}\n\t\t\t\tthis.indexedOBJLoader.load( asset, function ( object ) {\n\t\t\t\t\tonResponse(type, object, id);\n\t\t\t\t}, this.onProgress, this.onError );\n\t\t\t\tbreak;\n\n\t\t\tcase Repository.MODEL: \n\t\t\t\tif(this.OBJLoader == null){\n\t\t\t\t\tthis.OBJLoader = new THREE.OBJLoader( this.manager );\n\t\t\t\t}\n\t\t\t\tthis.OBJLoader.load( asset, function ( object ) {\n\t\t\t\t\tonResponse(type, object, id);\n\t\t\t\t}, this.onProgress, this.onError );\n\t\t\t\tbreak;\n\n\t\t\tcase Repository.TEXTURE:\n\t\t\t\tif(this.textureLoader == null){\n\t\t\t\t\tthis.textureLoader = new THREE.ImageLoader( this.manager );\n\t\t\t\t}\n\t\t\t\tthis.textureLoader.load( asset, function ( image ) {\n\t\t\t\t\tvar tex = new THREE.Texture({generateMipmaps:false});\n\t\t\t\t\ttex.image = image;\n\t    \t\t\ttex.needsUpdate = true;\n\t    \t\t\tonResponse(type, tex, id);\n\t\t\t\t}, this.onProgress, this.onError);\n\t\t\t\tbreak;\n\n\t\t\tcase Repository.CUBEMAP:\n\t\t\t\tif(this.cubeTextureLoader == null){\n\t\t\t\t\tthis.cubeTextureLoader = new THREE.CubeTextureLoader();\n\t\t\t\t}\n\t\t\t\tthis.cubeTextureLoader.load(asset, function(cube){\n\t\t\t\t\tonResponse(type, cube, id);\n\t\t\t\t}, this.onProgress, this.onError)\n\t\t\t\tbreak;\n\n\t\t\tcase Repository.TEXTURE_DATA:\n\t\t\t\tif(this.textureLoader == null){\n\t\t\t\t\tthis.textureLoader = new THREE.ImageLoader( this.manager ); \n\t\t\t\t}\n\t\t\t\tthis.textureLoader.load( asset, function ( image ) {\n\t\t\t\t\tvar canvas = document.createElement( 'canvas' );\n\t\t\t\t    canvas.width = image.width;\n\t\t\t\t    canvas.height = image.height;\n\t\t\t\t    var context = canvas.getContext( '2d' );\n\t\t\t\t    context.drawImage(image,0,0);\n\t\t\t\t    onResponse(type, context.getImageData(0, 0, image.width, image.height), id);\n\t\t\t\t}, this.onProgress, this.onError);\n\t\t\t    break;\n\n\t\t\t case Repository.TEXTURE_AND_DATA:\n\t\t\t \tif(this.textureLoader == null){\n\t\t\t\t\tthis.textureLoader = new THREE.ImageLoader( this.manager ); \n\t\t\t\t}\n\t\t\t\tthis.textureLoader.load( asset, function ( image ) {\n\t\t\t\t\tvar tex = new THREE.Texture({generateMipmaps:false});\n\t\t\t\t\ttex.image = image;\n\t    \t\t\ttex.needsUpdate = true;\n\t    \t\t\tonResponse(Repository.TEXTURE, tex, id);\n\n\t\t\t\t\tvar canvas = document.createElement( 'canvas' );\n\t\t\t\t    canvas.width = image.width;\n\t\t\t\t    canvas.height = image.height;\n\t\t\t\t    var context = canvas.getContext( '2d' );\n\t\t\t\t    context.drawImage(image,0,0);\n\t\t\t\t    onResponse(Repository.TEXTURE_DATA, context.getImageData(0, 0, image.width, image.height), id);\n\t\t\t\t}, this.onProgress, this.onError);\n\t\t\t\tbreak;\n\t\t}\n\t},\n\n\n\tonProgress: function ( xhr ) {\n\t\tif ( xhr.lengthComputable ) {\n\t\t\tvar percentComplete = xhr.loaded / xhr.total * 100;\n\t\t\t//console.log( Math.round(percentComplete, 2) + '% downloaded' );\n\t\t}\n\t},\n\tonError: function ( xhr ) {\n\t\t//console.log( 'Failed fetching ', xhr );\n\t}\n\n}",
			"file": "/home/busyalex/Insignety Designer/designer/src/webgl/util/Repository.js",
			"file_size": 6642,
			"file_write_time": 131605000083417117,
			"settings":
			{
				"buffer_size": 6642,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "RING.GeometryDescriptor = function () {\n\tthis.type = \"GeometryDescriptor\";\n\n\tthis.url = undefined;\n\tthis.meshType = undefined;\n};\n\nRING.GeometryDescriptor.SURRFACE_TYPE_PARAMETRIC = 'SURRFACE_TYPE_PARAMETRIC';\nRING.GeometryDescriptor.SURRFACE_TYPE_FREE_FORM = 'SURRFACE_TYPE_FREE_FORM';\n\nRING.GeometryDescriptor.RING_SIDE_INTERIOR = 'RING_SIDE_INTERIOR';\nRING.GeometryDescriptor.RING_SIDE_EXTERIOR = 'RING_SIDE_EXTERIOR';\nRING.GeometryDescriptor.RING_SIDE_NONE = 'RING_SIDE_NONE';\n\nRING.GeometryDescriptor.MESH_TYPE_OUTER_360_A = 'MESH_TYPE_OUTER_360_A';\nRING.GeometryDescriptor.MESH_TYPE_OUTER_360_B = 'MESH_TYPE_OUTER_360_B';\nRING.GeometryDescriptor.MESH_TYPE_OUTER_360_C = 'MESH_TYPE_OUTER_360_C';\nRING.GeometryDescriptor.MESH_TYPE_INNER_360 = 'MESH_TYPE_INNER_360';\nRING.GeometryDescriptor.MESH_TYPE_FINISH_HIGH_GLOSS = 'MESH_TYPE_FINISH_HIGH_GLOSS';\nRING.GeometryDescriptor.MESH_TYPE_FINISH_MULTI = 'MESH_TYPE_FINISH_MULTI';\nRING.GeometryDescriptor.MESH_TYPE_FINISH_SAND = 'MESH_TYPE_FINISH_SAND';\nRING.GeometryDescriptor.MESH_TYPE_STL = 'MESH_TYPE_STL';\n\nRING.GeometryDescriptor.MakeCanonicalDescriptor = function(meshType){\n\tvar descriptor = new RING.GeometryDescriptor();\n\tif(meshType != undefined){\n\t\tswitch(meshType){\n\t\t\tcase RING.GeometryDescriptor.MESH_TYPE_OUTER_360_A :\n\t\t\t\tdescriptor.url = ['assets/obj/circ/A_smallest.obj', 'assets/obj/circ/A_largest.obj'];\n\t\t\t\tdescriptor.meshType = RING.GeometryDescriptor.MESH_TYPE_OUTER_360_A;\n\t\t\t\tbreak;\n\t\t\tcase RING.GeometryDescriptor.MESH_TYPE_OUTER_360_B :\n\t\t\t\tdescriptor.url = ['assets/obj/circ/B_smallest.obj', 'assets/obj/circ/B_largest.obj'];\n\t\t\t\tdescriptor.meshType = RING.GeometryDescriptor.MESH_TYPE_OUTER_360_B;\n\t\t\t\tbreak;\n\t\t\tcase RING.GeometryDescriptor.MESH_TYPE_OUTER_360_C :\n\t\t\t\tdescriptor.url = ['assets/obj/circ/C_smallest.obj', 'assets/obj/circ/C_largest.obj'];\n\t\t\t\tdescriptor.meshType = RING.GeometryDescriptor.MESH_TYPE_OUTER_360_C;\n\t\t\t\tbreak;\n\t\t\tcase RING.GeometryDescriptor.MESH_TYPE_INNER_360: \n\t\t\t\tdescriptor.meshType = RING.GeometryDescriptor.MESH_TYPE_INNER_360;\n\t\t\t\tdescriptor.url = ['assets/obj/circ/inside_smallest.obj','assets/obj/circ/inside_largest.obj'];\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn descriptor;\n};\n\nRING.GeometryDescriptor.MakeCanonicalMeshType = function(profile, side){\n\tvar meshType = undefined;\n\tswitch(side){\n\t\tcase RING.GeometryDescriptor.RING_SIDE_INTERIOR: \n\t\t\tmeshType = RING.GeometryDescriptor.MESH_TYPE_INNER_360;\n\t\t\tbreak;\n\t\tcase RING.GeometryDescriptor.RING_SIDE_EXTERIOR:\n\t\t\tswitch(profile){\n\t\t\t\tcase RING.PROFILE_A :\n\t\t\t\t\tmeshType = RING.GeometryDescriptor.MESH_TYPE_OUTER_360_A;\n\t\t\t\t\tbreak;\n\t\t\t\tcase RING.PROFILE_B :\n\t\t\t\t\tmeshType = RING.GeometryDescriptor.MESH_TYPE_OUTER_360_B;\n\t\t\t\t\tbreak;\n\t\t\t\tcase RING.PROFILE_C :\n\t\t\t\t\tmeshType = RING.GeometryDescriptor.MESH_TYPE_OUTER_360_C;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\treturn meshType;\n};\n\nRING.GeometryDescriptor.prototype = {\n\n    constructor: RING.GeometryDescriptor,\n\n    fromServerModel: function(freeForm){\n    \tthis.url = freeForm.url;\n    \tthis.meshType = freeForm.meshType;\n    \tif(this.canonical())\n    \t\tObject.assign(this, RING.GeometryDescriptor.MakeCanonicalDescriptor(this.meshType));\n    \treturn this;\n    },\n\n    toServerModel: function(){\n    \treturn {\n    \t\turl: this.url,\n    \t\tmeshType: this.meshType\n    \t}\n    },\n\n    fromEnumerable: function(object){\n    \tObject.assign(this, object);\n    \tif(this.canonical())\n    \t\tObject.assign(this, RING.GeometryDescriptor.MakeCanonicalDescriptor(this.meshType));\n    \treturn this;\n    },\n\n    toEnumerable: function(){\n    \treturn {\n    \t\turl: this.url,\n    \t\tmeshType: this.meshType,\n    \t}\n    },\n\n    diff: function(descriptor){\n        return {\n            url: (descriptor.url != this.url ? descriptor.url : undefined),\n            meshType: (descriptor.meshType != this.meshType ? descriptor.meshType : undefined)\n        };\n    },\n\n    canonical: function(){\n    \treturn this.meshType == RING.GeometryDescriptor.MESH_TYPE_INNER_360 ||\n    \t\t   this.meshType == RING.GeometryDescriptor.MESH_TYPE_OUTER_360_A ||\n    \t\t   this.meshType == RING.GeometryDescriptor.MESH_TYPE_OUTER_360_B || \n    \t\t   this.meshType == RING.GeometryDescriptor.MESH_TYPE_OUTER_360_C;\n    }\n\n}",
			"file": "/home/busyalex/Insignety Designer/designer/src/webgl/model/GeometryDescriptor.js",
			"file_size": 4183,
			"file_write_time": 131604881918422625,
			"settings":
			{
				"buffer_size": 4183,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "RING.GeometryModel = function () {\n\tthis.type = \"GeometryModel\";\n\n\tthis.assets = undefined;\n\tthis.meshType = undefined;\n\tthis.surfaceType = undefined;\n\tthis.ringSide = undefined;\n};\n\nRING.GeometryModel.prototype = {\n\n    constructor: RING.GeometryModel,\n\n    fromDescriptor: function(descriptor){\n    \tthis.meshType = descriptor.meshType;\n        this.surfaceType = descriptor.canonical() ? RING.GeometryDescriptor.SURRFACE_TYPE_PARAMETRIC : RING.GeometryDescriptor.SURRFACE_TYPE_FREE_FORM;\n        this.ringSide = descriptor.canonical() ? (descriptor.meshType == RING.GeometryDescriptor.MESH_TYPE_INNER_360 ? RING.GeometryDescriptor.RING_SIDE_INTERIOR : RING.GeometryDescriptor.RING_SIDE_EXTERIOR) : RING.GeometryDescriptor.RING_SIDE_NONE;\n        this.assets = {};\n        var flatUrls = descriptor.url.constructor === Array ? descriptor.url : [descriptor.url];\n        for(var i = 0 ; i < flatUrls.length; i++){\n            this.assets[flatUrls[i]] = undefined;\n        }\n        return this;\n    },\n\n    toDescriptor: function(descriptor){\n        var enumerable = {\n            meshType: this.meshType,\n            url: []\n        }\n        for(var asset in this.assets){\n            if(this.assets.hasOwnProperty(asset)){\n                enumerable.url.push(asset);\n            }\n        }\n        if(enumerable.url.length == 1) enumerable.url = enumerable.url[0];\n        return new RING.GeometryDescriptor().fromEnumerable(enumerable);\n    },\n    \n\n    load: function(onModelLoaded){\n        this.modelReadyCallback = onModelLoaded;\n        for(var asset in this.assets){\n            if(this.assets.hasOwnProperty(asset)){\n                repository.load(Repository.INDEXED_MODEL, asset, asset, function(type, asset, id){\n                    this.onAssetLoaded(type, asset, id);\n                    this.notify(id);\n                }.bind(this));\n            }\n        }\n    },\n\n    onAssetLoaded: function(type, asset, id){\n        if(this.assets.hasOwnProperty(id)){\n            this.assets[id] = asset;\n        }\n    },\n\n    isReady: function(){\n        for(var asset in this.assets){\n            if(this.assets.hasOwnProperty(asset)){\n                if(this.assets[asset] == undefined)\n                    return false;\n            }\n        }\n        return true;\n    },\n\n    notify: function(id){\n        if(this.modelReadyCallback)\n            this.modelReadyCallback(id);\n    },\n\n    getSmallestCanonicalAsset: function(){\n    \tif(this.surfaceType != RING.GeometryDescriptor.SURRFACE_TYPE_PARAMETRIC)\n    \t\treturn;\n    \treturn this.assets[Object.keys(this.assets)[0]];\n    },\n    \n    getLargestCanonicalAsset: function(){\n    \tif(this.surfaceType != RING.GeometryDescriptor.SURRFACE_TYPE_PARAMETRIC)\n    \t\treturn;\n    \treturn this.assets[Object.keys(this.assets)[1]];\n    },\n\n    getFreeFormAsset: function(){\n    \tif(this.surfaceType != RING.GeometryDescriptor.SURRFACE_TYPE_FREE_FORM)\n    \t\treturn;\n    \treturn this.assets[0][Object.keys(this.assets[0])[0]];\n    },\n\n    release: function(){\n        this.modelReadyCallback = null;\n    }\n}",
			"file": "/home/busyalex/Insignety Designer/designer/src/webgl/model/GeometryModel.js",
			"file_size": 3059,
			"file_write_time": 131605008212376738,
			"settings":
			{
				"buffer_size": 3059,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ringde",
				"Preferences: Package Control Settings – Default"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"Pac",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"Packa",
				"Package Control: Install Package"
			],
			[
				"Package Control",
				"Preferences: Package Control Settings – User"
			],
			[
				"disco",
				"Package Control: Discover Packages"
			],
			[
				"packa",
				"Package Control: Enable Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/busyalex/Desktop/das",
		"/home/busyalex/Insignety Designer/designer/src/webgl/Physics.js",
		"/home/busyalex/.sbt/1.0/plugins/plugins.sbt",
		"/home/busyalex/Insignety Designer/designer/src/modules/app/app.config.es6",
		"/home/busyalex/Insignety Designer/designer/test.html",
		"/home/busyalex/Insignety Designer/designer/src/webgl/Renderer.js",
		"/home/busyalex/Insignety Designer/designer/src/webgl/RingInstance.js",
		"/home/busyalex/Insignety Designer/designer/src/webgl/util/utils.js",
		"/home/busyalex/Insignety Designer/designer/test-file.js",
		"/home/busyalex/Insignety Designer/designer/src/webgl/Repository.js",
		"/home/busyalex/Insignety Designer/designer/src/webgl/RawGeometry.js",
		"/home/busyalex/Insignety Designer/designer/src/webgl/RingBuilder.js",
		"/home/busyalex/Insignety Designer/designer/src/libs/mesh-simplify.js",
		"/home/busyalex/stk/DrawContext.js",
		"/home/busyalex/stk/index_0.js",
		"/home/busyalex/Insignety Designer/designer/src/webgl/utils.js",
		"/home/busyalex/Insignety Designer/designer/src/canvas2D/HandwritingFeature.js",
		"/home/busyalex/Insignety Designer/designer/src/canvas2D/FingerprintFeature.js",
		"/home/busyalex/Insignety Designer/designer/src/canvas2D/LineFeature.js",
		"/home/busyalex/octane-scripting/src/Load.lua",
		"/home/busyalex/octane-scripting/src/configuration.json",
		"/home/busyalex/octane-scripting/assets/models/diamond3.obj",
		"/home/busyalex/octane-scripting/assets/models/diamond2.obj",
		"/home/busyalex/octane-scripting/assets/models/diamond.obj",
		"/home/busyalex/stk/lib/fsquad.js",
		"/home/busyalex/stk/shaders/skybox-vert.js",
		"/home/busyalex/stk/shaders/skybox-frag.js",
		"/home/busyalex/stk/shaders/glsl-common.js",
		"/home/busyalex/stk/shaders/cube-skybox-frag.js",
		"/home/busyalex/stk/shaders/cube-skybox-vert.js",
		"/home/busyalex/stk/lib/cube.js",
		"/home/busyalex/stk/Material.js",
		"/home/busyalex/stk/Materials.js",
		"/home/busyalex/Downloads/three.js-master/src/extras/geometries/PlaneGeometry.js",
		"/home/busyalex/Downloads/three.js-master/src/extras/geometries/PlaneBufferGeometry.js",
		"/home/busyalex/stk/lib/plane.js",
		"/home/busyalex/stk/lib/torus.js",
		"/home/busyalex/Insignety Designer/designer/src/modules/ring_design/ringdesign.controller.es6",
		"/home/busyalex/Insignety Designer/designer/src/webgl/Bridge.js",
		"/home/busyalex/Insignety Designer/designer/src/modules/main/staticData.service.es6",
		"/home/busyalex/Insignety Designer/designer/src/canvas2D/FeatureModel.js",
		"/home/busyalex/Insignety Designer/designer/src/canvas2D/Restrictions.js",
		"/home/busyalex/Insignety Designer/designer/src/modules/ring_design/radial-menu/radialMenu.directive.es6",
		"/home/busyalex/stk/shaders/fsquad-vert.js",
		"/home/busyalex/stk/Entity.js",
		"/home/busyalex/stk/shaders/fsquad-frag.js",
		"/home/busyalex/stk/util.js",
		"/home/busyalex/stk/Board.js",
		"/home/busyalex/stk/common.js",
		"/home/busyalex/stk/Geometry.js",
		"/home/busyalex/stk/GPawn.js",
		"/home/busyalex/stk/Pass.js",
		"/home/busyalex/stk/lib/gl-matrix.js",
		"/home/busyalex/stk/shaders/vert.js",
		"/home/busyalex/stk/shaders/indirect-frag.js",
		"/home/busyalex/stk/shaders/indirect-vert.js",
		"/home/busyalex/stk/controls.js",
		"/home/busyalex/stk/index.html",
		"/home/busyalex/stk/shaders/frag.js",
		"/home/busyalex/stk/index.js",
		"/home/busyalex/Downloads/three.js-master/src/core/BufferGeometry.js",
		"/home/busyalex/Insignety Designer/designer/src/canvas2D/WaveFeature.js",
		"/home/busyalex/Insignety Designer/designer/src/canvas2D/TextFeature.js",
		"/home/busyalex/Insignety Designer/designer/src/canvas2D/PatternFeature.js",
		"/home/busyalex/Insignety Designer/designer/src/canvas2D/ObliqueLineFeature.js",
		"/home/busyalex/Insignety Designer/designer/src/canvas2D/NaturePatternFeature.js",
		"/home/busyalex/Insignety Designer/designer/src/canvas2D/ECGFeature.js",
		"/home/busyalex/Insignety Designer/designer/src/canvas2D/DiamondPatternFeature.js",
		"/home/busyalex/stk/shaders/writedepth-frag.js",
		"/home/busyalex/stk/NodeState.js",
		"/home/busyalex/stk/Node.js",
		"/home/busyalex/.cache/.fr-7UTYCf/fboDepth/src/main.cpp",
		"/home/busyalex/stk/shaders/writedepth-vert.js",
		"/home/busyalex/stk/shaders/writedepth-frag",
		"/home/busyalex/stk/shaders/writedepth-vert",
		"/home/busyalex/stk/vert.js",
		"/home/busyalex/Insignety Designer/designer/src/modules/app/insignety-conf.js",
		"/home/busyalex/backoffice/src/app/scripts/config/insignety-conf.js",
		"/home/busyalex/octane-scripting/src/require-path.lua",
		"/home/busyalex/octane-scripting/src/path.lua",
		"/home/busyalex/Insignety Designer/designer/src/webgl/Materials.js",
		"/home/busyalex/Insignety Designer/designer/src/webgl/ring.js",
		"/home/busyalex/Insignety Designer/designer/src/webgl/lib/three.js",
		"/home/busyalex/octane-scripting/src/DiamondPlacement.lua",
		"/home/busyalex/octane-scripting/.gitignore",
		"/home/busyalex/.sbt/1.0/global.sbt",
		"/home/busyalex/Insignety cleanup/insignety/build.sbt",
		"/home/busyalex/.sbt/0.13/plugins/plugins.sbt",
		"/home/busyalex/Insignety Designer/designer/src/webgl/OffscreenRender.js",
		"/home/busyalex/octane-scripting/src/RingUtils.lua",
		"/home/busyalex/octane-scripting/src/MeshValidator.lua",
		"/home/busyalex/backoffice/src/app/scripts/services/artifactLibrary.service.js",
		"/home/busyalex/backoffice/src/app/scripts/controllers/artifactLibrary/editArtifact.controller.js",
		"/home/busyalex/Insignety Designer/designer/src/modules/ring_design/add-feature-panel/add-feature-panel.html",
		"/home/busyalex/Insignety Designer/designer/src/canvas2D/Surface2D.js",
		"/tmp/dev-rendering-server/526471ad-15d3-4831-9861-63b4974c5bb2/input/configuration.json",
		"/home/busyalex/octane-scripting/src/conf.lua",
		"/home/busyalex/octane-scripting/res",
		"/home/busyalex/octane-scripting/results",
		"/tmp/dev-rendering-server/a78759a1-5bf2-4b03-a8ef-8397bf1097bf/input/configuration.json",
		"/home/busyalex/Desktop/configuration.json",
		"/home/busyalex/octane-scripting/assets/generated/B475-exterior.obj",
		"/tmp/dev-rendering-server/fe4b05d1-7829-4a8e-8b36-234e0c4e0b33/input/configuration.json",
		"/tmp/dev-rendering-server/e5fdb4cf-e590-4178-945c-4c83517dfbef/input/configuration.json",
		"/home/busyalex/Desktop/path-external.lua",
		"/home/busyalex/Insignety Designer/designer/src/modules/ring_design/add-feature-panel/add-feature-panel.controller.js",
		"/home/busyalex/Insignety Designer/designer/src/modules/ring_design/text-symbols/textsymbols.directive.es6",
		"/home/busyalex/octane-scripting/lib/bitmap_resize.lua",
		"/home/busyalex/octane-scripting/assets/generated/B448-exterior.obj",
		"/home/busyalex/Downloads/8-44-6-outer.obj",
		"/home/busyalex/octane-scripting/src/LoadDiamonds.lua",
		"/home/busyalex/octane-scripting/assets/generated/B448-exterior_old.obj",
		"/home/busyalex/.OctaneRender/license",
		"/home/busyalex/octane-scripting/lib/json.lua",
		"/home/busyalex/Insignety cleanup/insignety/components/service/rendering-service/src/main/resources/Load.lua",
		"/home/busyalex/Downloads/2017-11-02-RingOuter-B-8-44-planar-mapping.obj",
		"/home/busyalex/Desktop/require-path-external.lua",
		"/home/busyalex/Insignety Designer/designer/src/webgl/model/GeometryDescriptor.js",
		"/home/busyalex/Insignety Designer/designer/src/webgl/model/GeometryModel.js",
		"/home/busyalex/Insignety Designer/designer/src/webgl/model/RingDescriptor.js",
		"/home/busyalex/Insignety Designer/designer/index.html",
		"/home/busyalex/Insignety Designer/designer/src/webgl/model/MaterialDescriptor.js",
		"/home/busyalex/Insignety Designer/designer/src/webgl/shaders/RingPlane.js",
		"/home/busyalex/Insignety Designer/designer/src/webgl/lib/js/controls/TrackballControls.js",
		"/home/busyalex/Insignety Designer/designer/src/webgl/model/RingModel.js",
		"/home/busyalex/Desktop/path.lua",
		"/home/busyalex/Desktop/require-path.lua",
		"/home/busyalex/octane-scripting/src/Path.lua"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/home/busyalex/Insignety Designer/designer/src",
			"/home/busyalex/backoffice/src",
			"/home/busyalex/Insignety Designer/designer/src/modules/ring_design",
			"/home/busyalex/Insignety Designer/designer/src/canvas2D,/home/busyalex/Insignety Designer/designer/src/webgl",
			"/home/busyalex/Insignety Designer/designer/src/canvas2D,/home/busyalex/Insignety Designer/designer/src/webgl,/home/busyalex/Insignety Designer/designer/src/canvas2D,/home/busyalex/Insignety Designer/designer/src/webgl,/home/busyalex/Insignety Designer/designer/src/modules",
			"/home/busyalex/Insignety Designer/designer/src/canvas2D,/home/busyalex/Insignety Designer/designer/src/webgl,/home/busyalex/Insignety Designer/designer/src/canvas2D,/home/busyalex/Insignety Designer/designer/src/webgl",
			"/home/busyalex/Insignety Designer/designer/src/canvas2D,/home/busyalex/Insignety Designer/designer/src/webgl",
			"/home/busyalex/Insignety Designer/designer/src/styles",
			"/home/busyalex/Insignety Designer/designer",
			"/home/busyalex/Insignety Designer/designer/src",
			"/home/busyalex/WEBGL/three/src/rev4",
			"/home/busyalex/Insignety Designer/designer/src/canvas2D",
			"/home/busyalex/Insignety Designer/designer/src/webgl",
			"/home/busyalex/InsignetyDesigner/designer,/home/busyalex/WEBGL/three/src",
			"/home/busyalex/InsignetyDesigner/designer",
			"/home/busyalex/InsignetyDesigner/designer/app",
			"/home/busyalex/InsignetyDesigner/designer/app/scripts",
			"/home/busyalex/InsignetyDesigner/designer/app/scriptsrepo"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"mixmatext",
			"matexter",
			"update",
			"scene",
			"minimumCostEdge",
			"ScalafixPlugin",
			"innerSegments",
			"getSmallestCanonicalAsset",
			"processSegment",
			"this.id",
			"this.surface",
			"this.model",
			"activeMaterialBase",
			"that",
			"modelReadyCallback",
			"infiniteSequentialRandomUpdates",
			"onModelUpdated",
			"randomRingEnumerable",
			"update",
			"diamond",
			"gamma",
			"this.data",
			"ubo_vertex_transform",
			"skyboxGeometry",
			"this.skyBoxCubeMaterial",
			"this.material",
			"fromMetric",
			"toMetric",
			"fromMetric",
			"metric",
			"polar",
			"metric",
			"vp",
			"vec3",
			"look",
			"looka",
			"material",
			"\t\tgl.bufferSubData(gl.UNIFORM_BUFFER, offset*4, new Float32Array(data), 0, data.length);",
			"wrapTgl",
			"ubo",
			"torus",
			"plane",
			"var",
			"addFeature",
			"side |",
			"side ?",
			"updateMaterial",
			"getTotalCarats",
			"updateMaterial",
			"ringUpdateOptions",
			"lookAt",
			"invert",
			"model",
			"camMat",
			".hdr",
			"changeArtifactAccess",
			".hdr",
			"power",
			".hdr",
			"maxsamples",
			"SAMPLES",
			".hdr",
			"normals",
			"samples",
			"maxsamples",
			"samples",
			".hdr",
			"side",
			"planeref",
			"prgb",
			"planemat",
			"meshStats",
			"stat",
			"stats",
			"planeplaceval",
			"planeplace",
			"file",
			"planeplace",
			"plane",
			"planemat",
			"flipp",
			"A_POLY_NORMAL_INDICES",
			"envirogama",
			"enviro",
			"texenviro",
			"envirome",
			"power",
			"envirome",
			"diamond",
			"diamond2",
			"cognac",
			"samples",
			"transform",
			"placement",
			"samples",
			"resizeImage",
			"evaluate",
			"ntype",
			"enum",
			"PT_ENUM",
			"continue",
			"sides",
			"exter",
			"INT",
			"conf",
			"math",
			"PI",
			"base",
			"exter",
			"right",
			"y",
			"rottxinter",
			"inter",
			"sample",
			"octane.NT_MAT",
			"matexter",
			"matinter",
			"prongCap",
			"sample",
			"width",
			"circumference",
			"diamond",
			"ringInfo",
			"RENDER_OUTPUT_PATH",
			"invert",
			"sample",
			"black",
			"samples"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"ringTable",
			"CANVAS.NaturePatternFeature",
			"ease-in-out",
			":",
			"",
			" ",
			"",
			"hAlign.options.floor",
			"vAlign.options.ceil",
			"vAlign.options.floor",
			"thickness.options.step",
			"thickness.options.ceil",
			"thickness.options.floor",
			"length.options.floor",
			"length.options.step",
			"length.options.ceil",
			"length.options.floor"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/busyalex/Insignety Designer/designer/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9718,
						"regions":
						{
						},
						"selection":
						[
							[
								5285,
								5285
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1484.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/busyalex/Insignety Designer/designer/src/modules/ring_design/ringdesign.controller.es6",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 111225,
						"regions":
						{
						},
						"selection":
						[
							[
								59671,
								59671
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 19760.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/busyalex/Insignety Designer/designer/src/webgl/Renderer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40153,
						"regions":
						{
						},
						"selection":
						[
							[
								15390,
								15390
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 8845.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/busyalex/Insignety Designer/designer/src/webgl/utils.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16853,
						"regions":
						{
						},
						"selection":
						[
							[
								12946,
								12946
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8305.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/busyalex/octane-scripting/src/Load.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 47500,
						"regions":
						{
						},
						"selection":
						[
							[
								37291,
								37291
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 16017.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/busyalex/octane-scripting/src/configuration.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11249,
						"regions":
						{
						},
						"selection":
						[
							[
								209,
								209
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JSON (JavaScriptNext).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/busyalex/Insignety Designer/designer/src/webgl/RingController.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2429,
						"regions":
						{
						},
						"selection":
						[
							[
								573,
								573
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 798.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/home/busyalex/.bashrc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3841,
						"regions":
						{
						},
						"selection":
						[
							[
								3841,
								3841
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1520.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/home/busyalex/Insignety cleanup/insignety/build.sbt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22512,
						"regions":
						{
						},
						"selection":
						[
							[
								9752,
								9752
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7353.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/home/busyalex/Insignety Designer/designer/src/modules/app/insignety-conf.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 924,
						"regions":
						{
						},
						"selection":
						[
							[
								497,
								497
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/home/busyalex/Insignety Designer/designer/src/webgl/lib/SimplifyModifier.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9789,
						"regions":
						{
						},
						"selection":
						[
							[
								9435,
								9435
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 7849.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/home/busyalex/Insignety cleanup/insignety/project/plugins.sbt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1755,
						"regions":
						{
						},
						"selection":
						[
							[
								1698,
								1698
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 783.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/home/busyalex/Insignety Designer/designer/src/webgl/RingBuilder.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25198,
						"regions":
						{
						},
						"selection":
						[
							[
								14214,
								14214
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 5016.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/home/busyalex/Insignety Designer/designer/src/webgl/Repository.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9280,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/home/busyalex/Insignety Designer/designer/src/webgl/RawGeometry.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8976,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1539.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "/home/busyalex/Insignety Designer/designer/src/webgl/RingInstance.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30008,
						"regions":
						{
						},
						"selection":
						[
							[
								4530,
								4530
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "/home/busyalex/Insignety Designer/designer/src/webgl/static/Materials.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15880,
						"regions":
						{
						},
						"selection":
						[
							[
								4975,
								4975
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3990.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "/home/busyalex/Insignety Designer/designer/src/webgl/util/CanvasTexture.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3141,
						"regions":
						{
						},
						"selection":
						[
							[
								285,
								285
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "/home/busyalex/Insignety Designer/designer/src/webgl/RingSurface.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 790,
						"regions":
						{
						},
						"selection":
						[
							[
								179,
								221
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "/home/busyalex/Insignety Designer/designer/src/test/ring-descriptor-tests.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 870,
						"regions":
						{
						},
						"selection":
						[
							[
								34,
								34
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "/home/busyalex/Insignety Designer/designer/src/webgl/api/Bridge.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31092,
						"regions":
						{
						},
						"selection":
						[
							[
								10024,
								10024
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage"
						},
						"translation.x": -0.0,
						"translation.y": 4418.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "/home/busyalex/Insignety Designer/designer/src/webgl/model/RingDescriptorUtils.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3670,
						"regions":
						{
						},
						"selection":
						[
							[
								3547,
								3547
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1007.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "/home/busyalex/Insignety Designer/designer/src/webgl/model/MaterialDescriptor.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1150,
						"regions":
						{
						},
						"selection":
						[
							[
								1145,
								1145
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "/home/busyalex/Insignety Designer/designer/src/webgl/model/RingDescriptor.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6555,
						"regions":
						{
						},
						"selection":
						[
							[
								382,
								382
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "/home/busyalex/Insignety Designer/designer/src/webgl/model/RingModel.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7168,
						"regions":
						{
						},
						"selection":
						[
							[
								758,
								758
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "/home/busyalex/Insignety Designer/designer/src/webgl/util/Repository.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6642,
						"regions":
						{
						},
						"selection":
						[
							[
								6367,
								6367
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "/home/busyalex/Insignety Designer/designer/src/webgl/model/GeometryDescriptor.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4183,
						"regions":
						{
						},
						"selection":
						[
							[
								378,
								378
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "/home/busyalex/Insignety Designer/designer/src/webgl/model/GeometryModel.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3059,
						"regions":
						{
						},
						"selection":
						[
							[
								2782,
								2782
							]
						],
						"settings":
						{
							"syntax": "Packages/Unity3D/UnityJavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 1083.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 35.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 124.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 29.0
	},
	"pinned_build_system": "",
	"project": "stk.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"render",
				"~/Insignety Designer/designer/src/webgl/Renderer.js"
			],
			[
				"inde",
				"~/Insignety Designer/designer/index.html"
			],
			[
				"ring",
				"~/Insignety Designer/designer/src/webgl/RingBuilder.js"
			],
			[
				"ringins",
				"~/Insignety Designer/designer/src/webgl/RingInstance.js"
			],
			[
				"geometry",
				"~/Insignety Designer/designer/src/webgl/model/GeometryModel.js"
			],
			[
				"ringb",
				"~/Insignety Designer/designer/src/webgl/RingBuilder.js"
			],
			[
				"rings",
				"~/Insignety Designer/designer/src/webgl/RingSurface.js"
			],
			[
				"reposito",
				"~/Insignety Designer/designer/src/webgl/util/Repository.js"
			],
			[
				"brid",
				"~/Insignety Designer/designer/src/webgl/api/Bridge.js"
			],
			[
				"bridge",
				"~/Insignety Designer/designer/src/webgl/model/RingDescriptor.js"
			],
			[
				"ringi",
				"~/Insignety Designer/designer/src/webgl/RingInstance.js"
			],
			[
				"reposit",
				"~/Insignety Designer/designer/src/webgl/util/Repository.js"
			],
			[
				"ringmo",
				"~/Insignety Designer/designer/src/webgl/model/RingModel.js"
			],
			[
				"index",
				"~/stk/index.html"
			],
			[
				"load",
				"~/octane-scripting/src/Load.lua"
			],
			[
				"",
				"~/octane-scripting/src/configuration.json"
			],
			[
				"line",
				"~/Insignety Designer/designer/src/canvas2D/LineFeature.js"
			],
			[
				"material",
				"~/stk/Material.js"
			],
			[
				"indire",
				"~/stk/shaders/indirect-frag.js"
			],
			[
				"frag",
				"~/stk/shaders/frag.js"
			],
			[
				"sky",
				"~/stk/shaders/skybox-frag.js"
			],
			[
				"gls",
				"~/stk/shaders/glsl-common.js"
			],
			[
				"materials",
				"~/stk/Materials.js"
			],
			[
				"ind",
				"~/stk/index_0.js"
			],
			[
				"commo",
				"~/stk/common.js"
			],
			[
				"mater",
				"~/stk/Materials.js"
			],
			[
				"geome",
				"~/stk/Geometry.js"
			],
			[
				"geometr",
				"~/stk/Geometry.js"
			],
			[
				"comm",
				"~/stk/shaders/glsl-common.js"
			],
			[
				"materi",
				"~/stk/Material.js"
			],
			[
				"materia",
				"~/stk/Material.js"
			],
			[
				"matrei",
				"~/stk/Material.js"
			],
			[
				"utils",
				"~/Insignety Designer/designer/src/webgl/utils.js"
			],
			[
				"util",
				"~/Insignety Designer/designer/src/webgl/utils.js"
			],
			[
				"handw",
				"~/Insignety Designer/designer/src/canvas2D/HandwritingFeature.js"
			],
			[
				"cube",
				"~/stk/shaders/cube-skybox-frag.js"
			],
			[
				"cubes",
				"~/stk/shaders/cube-skybox-frag.js"
			],
			[
				"indirec",
				"~/stk/shaders/indirect-vert.js"
			],
			[
				"indi",
				"~/stk/shaders/indirect-frag.js"
			],
			[
				"como",
				"~/stk/shaders/glsl-common.js"
			],
			[
				"fsq",
				"~/stk/shaders/fsquad-vert.js"
			],
			[
				"vert",
				"~/stk/shaders/vert.js"
			],
			[
				"ver",
				"~/stk/shaders/vert.js"
			],
			[
				"in",
				"~/stk/index.html"
			],
			[
				"com",
				"~/stk/shaders/glsl-common.js"
			],
			[
				"skyb",
				"~/stk/shaders/cube-skybox-vert.js"
			],
			[
				"contr",
				"~/stk/controls.js"
			],
			[
				"controls",
				"~/stk/controls.js"
			],
			[
				"glma",
				"~/stk/lib/gl-matrix.js"
			],
			[
				"contro",
				"~/stk/controls.js"
			],
			[
				"indirectf",
				"~/stk/shaders/indirect-frag.js"
			],
			[
				"ine",
				"~/stk/index_0.js"
			],
			[
				"torus",
				"~/stk/lib/torus.js"
			],
			[
				"vertr",
				"~/Insignety Designer/designer/src/canvas2D/Restrictions.js"
			],
			[
				"plane",
				"~/stk/lib/plane.js"
			],
			[
				"pa",
				"~/stk/GPawn.js"
			],
			[
				"diamond",
				"~/octane-scripting/src/DiamondPlacement.lua"
			],
			[
				"valida",
				"~/octane-scripting/src/MeshValidator.lua"
			],
			[
				"ringut",
				"~/octane-scripting/src/RingUtils.lua"
			],
			[
				"vali",
				"~/octane-scripting/src/MeshValidator.lua"
			],
			[
				"diamo",
				"~/octane-scripting/src/DiamondPlacement.lua"
			],
			[
				"diamon",
				"~/octane-scripting/src/DiamondPlacement.lua"
			],
			[
				"diamondpl",
				"~/octane-scripting/src/DiamondPlacement.lua"
			],
			[
				"valid",
				"~/octane-scripting/src/MeshValidator.lua"
			],
			[
				"ingut",
				"~/octane-scripting/src/RingUtils.lua"
			],
			[
				"surfa",
				"~/Insignety Designer/designer/src/canvas2D/Surface2D.js"
			],
			[
				"ringu",
				"~/octane-scripting/src/RingUtils.lua"
			],
			[
				"conf",
				"~/Insignety Designer/designer/src/modules/app/insignety-conf.js"
			],
			[
				"diamondp",
				"~/octane-scripting/src/DiamondPlacement.lua"
			],
			[
				"con",
				"~/octane-scripting/src/configuration.json"
			],
			[
				"ringdes",
				"~/Insignety Designer/designer/src/modules/ring_design/ringdesign.controller.es6"
			],
			[
				"tex",
				"~/Insignety Designer/designer/src/canvas2D/TextFeature.js"
			],
			[
				"ringde",
				"~/Insignety Designer/designer/src/modules/ring_design/ringdesign.controller.es6"
			],
			[
				"ecg",
				"~/Insignety Designer/designer/src/canvas2D/ECGFeature.js"
			],
			[
				"trac",
				"~/Insignety Designer/designer/src/webgl/lib/js/controls/TrackballControls.js"
			],
			[
				"ringpl",
				"~/Insignety Designer/designer/src/webgl/shaders/RingPlane.js"
			],
			[
				"raw",
				"~/Insignety Designer/designer/src/webgl/util/RawGeometry.js"
			],
			[
				"utis",
				"~/Insignety Designer/designer/src/webgl/util/utils.js"
			],
			[
				"repos",
				"~/Insignety Designer/designer/src/webgl/util/Repository.js"
			],
			[
				"bridg",
				"~/Insignety Designer/designer/src/webgl/api/Bridge.js"
			],
			[
				"bridger",
				"~/Insignety Designer/designer/src/webgl/model/RingDescriptor.js"
			],
			[
				"ringmod",
				"~/Insignety Designer/designer/src/webgl/model/RingModel.js"
			],
			[
				"ringd",
				"~/Insignety Designer/designer/src/modules/ring_design/ringdesign.controller.es6"
			],
			[
				"ringm",
				"~/Insignety Designer/designer/src/webgl/model/RingModel.js"
			],
			[
				"rawg",
				"~/Insignety Designer/designer/src/webgl/RawGeometry.js"
			],
			[
				"obliq",
				"~/Insignety Designer/designer/src/canvas2D/ObliqueLineFeature.js"
			],
			[
				"wavef",
				"~/Insignety Designer/designer/src/canvas2D/WaveFeature.js"
			],
			[
				"linefe",
				"~/Insignety Designer/designer/src/canvas2D/LineFeature.js"
			],
			[
				"repo",
				"~/Insignety Designer/designer/src/webgl/Repository.js"
			],
			[
				"reposi",
				"~/Insignety Designer/designer/src/webgl/Repository.js"
			],
			[
				"rawge",
				"~/Insignety Designer/designer/src/webgl/RawGeometry.js"
			],
			[
				"wavefea",
				"~/Insignety Designer/designer/src/canvas2D/WaveFeature.js"
			],
			[
				"linef",
				"~/Insignety Designer/designer/src/canvas2D/LineFeature.js"
			],
			[
				"wave",
				"~/Insignety Designer/designer/src/canvas2D/WaveFeature.js"
			],
			[
				"obli",
				"~/Insignety Designer/designer/src/canvas2D/ObliqueLineFeature.js"
			],
			[
				"obl",
				"~/Insignety Designer/designer/src/canvas2D/ObliqueLineFeature.js"
			],
			[
				"repostiory",
				"~/Insignety Designer/designer/src/webgl/Repository.js"
			],
			[
				"indexed",
				"~/Insignety Designer/designer/src/webgl/indexedOBJLoader.js"
			],
			[
				"diamod",
				"~/Insignety Designer/designer/src/webgl/shaders/NewDiamond_Front.js"
			],
			[
				"rend",
				"~/Insignety Designer/designer/src/webgl/Renderer.js"
			],
			[
				"diamondb",
				"~/Insignety Designer/designer/src/webgl/shaders/NewDiamond_Back.js"
			],
			[
				"confgi",
				"~/octane-scripting/assets/configuration.json"
			],
			[
				"diamond_fr",
				"~/Insignety Designer/designer/src/webgl/shaders/NewDiamond_Front.js"
			],
			[
				"utisl",
				"~/Insignety Designer/designer/src/webgl/utils.js"
			],
			[
				"rende",
				"~/Insignety Designer/designer/src/webgl/Renderer.js"
			],
			[
				"three",
				"~/Insignety Designer/designer/src/webgl/lib/three.js"
			],
			[
				"thre",
				"~/Insignety Designer/designer/src/webgl/lib/three.js"
			],
			[
				"br",
				"~/Insignety Designer/designer/src/webgl/Bridge.js"
			],
			[
				"canvast",
				"~/Insignety Designer/designer/src/webgl/CanvasTexture.js"
			],
			[
				"obj",
				"~/Insignety Designer/designer/src/webgl/indexedOBJLoader.js"
			],
			[
				"ringdse",
				"~/Insignety Designer/designer/src/modules/ring_design/ringdesign.controller.es6"
			],
			[
				"diamondstr",
				"~/Insignety Designer/designer/src/webgl/DiamondStructure.js"
			],
			[
				"diamondba",
				"~/Insignety Designer/designer/src/webgl/DiamondBatch.js"
			],
			[
				"diamonds",
				"~/Insignety Designer/designer/src/webgl/DiamondStructure.js"
			],
			[
				"uti",
				"~/Insignety Designer/designer/src/webgl/utils.js"
			],
			[
				"ut",
				"~/Insignety Designer/designer/src/webgl/utils.js"
			],
			[
				"dia",
				"~/Insignety Designer/designer/src/webgl/shaders/DiamondFront.js"
			],
			[
				"nature",
				"~/Insignety Designer/designer/src/canvas2D/NaturePatternFeature.js"
			],
			[
				"naturepa",
				"~/Insignety Designer/designer/src/canvas2D/NaturePatternFeature.js"
			],
			[
				"natur",
				"~/Insignety Designer/designer/src/canvas2D/NaturePatternFeature.js"
			],
			[
				"patter",
				"~/Insignety Designer/designer/src/canvas2D/PatternFeature.js"
			],
			[
				"naturep",
				"~/Insignety Designer/designer/src/canvas2D/NaturePatternFeature.js"
			],
			[
				"track",
				"~/Insignety Designer/designer/src/webgl/lib/js/controls/TrackballControls.js"
			],
			[
				"text",
				"~/Insignety Designer/designer/src/modules/ring_design/texture/texture.controller.es6"
			],
			[
				"texture",
				"~/Insignety Designer/designer/src/modules/ring_design/texture/texture.controller.es6"
			],
			[
				"brd",
				"~/Insignety Designer/designer/src/webgl/Bridge.js"
			],
			[
				"laz",
				"~/Insignety Designer/designer/src/modules/ring_design/texture/lazy-thumbnails.directive.es6"
			],
			[
				"te",
				"~/Insignety Designer/designer/src/modules/ring_design/texture/texture.controller.es6"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
